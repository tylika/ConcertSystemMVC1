# ConcertSystemDomain Project
==================================================
// ==== ConcertSystemDomain.csproj ====
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="DocumentFormat.OpenXml" Version="3.3.0" />
    <PackageReference Include="DocumentFormat.OpenXml.Framework" Version="3.3.0" />
    <PackageReference Include="EPPlus" Version="7.7.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.3" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.3" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="9.0.3" />
  </ItemGroup>

</Project>


// ==== Model\Artist.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ConcertSystemDomain.Model;

public partial class Artist : Entity
{
    [Required(ErrorMessage = "Поле Назва є обов'язковим")]
    [Display(Name = "Назва")]
    public string FullName { get; set; } = null!;
    [Required(ErrorMessage = "Поле Соціальні мережі є обов'язковим")]
    public string? SocialMedia { get; set; }

    public virtual ICollection<Concert> Concerts { get; set; } = new List<Concert>();
}


// ==== Model\Concert.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ConcertSystemDomain.Model
{
    public partial class Concert : Entity
    {
        [Required(ErrorMessage = "Поле Артист є обов'язковим")]
        public int ArtistId { get; set; }

        [Required(ErrorMessage = "Поле Дата концерту є обов'язковим")]
        [CustomDateValidation(ErrorMessage = "Концерт має бути запланований щонайменше за місяць від поточної дати")]
        public DateTime ConcertDate { get; set; }

        [Required(ErrorMessage = "Поле Місто проведення є обов'язковим")]
        [Display(Name = "Місто проведення")]
        public string Location { get; set; } = null!;

        [Required(ErrorMessage = "Поле Загальна кількість квитків є обов'язковим")]
        [Range(1, int.MaxValue, ErrorMessage = "Загальна кількість квитків має бути більше 0")]
        public int TotalTickets { get; set; }

        [Required(ErrorMessage = "Поле Доступні квитки є обов'язковим")]
        [CustomTicketsValidation(ErrorMessage = "Доступних квитків не може бути більше, ніж загальна кількість квитків")]
        public int AvailableTickets { get; set; }

        public virtual Artist Artist { get; set; } = null!;
        public virtual ICollection<Ticket> Tickets { get; set; } = new List<Ticket>();
        public virtual ICollection<Genre> Genres { get; set; } = new List<Genre>();
    }

    // Кастомна валідація для дати концерту
    public class CustomDateValidationAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is DateTime concertDate)
            {
                // Поточна дата
                DateTime currentDate = DateTime.Now;
                // Додаємо місяць до поточної дати
                DateTime minAllowedDate = currentDate.AddMonths(1);

                if (concertDate < minAllowedDate)
                {
                    return new ValidationResult(ErrorMessage);
                }
            }
            return ValidationResult.Success;
        }
    }

    // Кастомна валідація для кількості квитків
    public class CustomTicketsValidationAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var concert = (Concert)validationContext.ObjectInstance;
            int availableTickets = (int)value;
            int totalTickets = concert.TotalTickets;

            if (availableTickets > totalTickets)
            {
                return new ValidationResult(ErrorMessage);
            }

            if (availableTickets < 0)
            {
                return new ValidationResult("Доступних квитків не може бути менше 0");
            }

            return ValidationResult.Success;
        }
    }
}

// ==== Model\Entity.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConcertSystemDomain.Model
{
    public abstract class Entity
    {
        public int Id { get; set; }
    }
}


// ==== Model\Genre.cs ====
using System;
using System.Collections.Generic;

namespace ConcertSystemDomain.Model;

public partial class Genre : Entity
{
    public string Name { get; set; } = null!;

    public virtual ICollection<Concert> Concerts { get; set; } = new List<Concert>();
}


// ==== Model\Purchase.cs ====
using System;
using System.Collections.Generic;

namespace ConcertSystemDomain.Model;

public partial class Purchase : Entity
{
    public int SpectatorId { get; set; }

    public DateTime PurchaseDate { get; set; }

    public string Status { get; set; } = null!;

    public virtual ICollection<PurchaseItem> PurchaseItems { get; set; } = new List<PurchaseItem>();

    public virtual Spectator Spectator { get; set; } = null!;
}


// ==== Model\PurchaseItem.cs ====
using System;
using System.Collections.Generic;

namespace ConcertSystemDomain.Model;

public partial class PurchaseItem : Entity
{
    public int PurchaseId { get; set; }

    public int TicketId { get; set; }

    public int Quantity { get; set; }

    public decimal Price { get; set; }

    public virtual Purchase Purchase { get; set; } = null!;

    public virtual Ticket Ticket { get; set; } = null!;
}


// ==== Model\Spectator.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ConcertSystemDomain.Model;

public partial class Spectator : Entity
{
    [Required(ErrorMessage = "Поле ПІБ є обов'язковим")]
    [Display(Name = "ПІБ")]
    public string FullName { get; set; } = null!;

    [Display(Name = "Телефон")]
    public string? Phone { get; set; }

    [Required(ErrorMessage = "Поле Електронна пошта є обов'язковим")]
    [EmailAddress(ErrorMessage = "Невірний формат електронної пошти")]
    [Display(Name = "Електронна пошта")]
    public string Email { get; set; } = null!;

    public virtual ICollection<Purchase> Purchases { get; set; } = new List<Purchase>();
}

// ==== Model\Ticket.cs ====
using System;
using System.Collections.Generic;

namespace ConcertSystemDomain.Model;

public partial class Ticket : Entity
{
    public int ConcertId { get; set; }

    public string? Row { get; set; }

    public int? SeatNumber { get; set; }

    public decimal BasePrice { get; set; }

    public string Status { get; set; } = null!;

    public virtual Concert Concert { get; set; } = null!;

    public virtual ICollection<PurchaseItem> PurchaseItems { get; set; } = new List<PurchaseItem>();
}


# ConcertSystemInfrastructure Project
==================================================
// ==== appsettings.json ====
{
    "ConnectionStrings": {
        "DefaultConnection": "Server=DESKTOP-D2I193F\\SQLEXPRESS; Database=ConcertTicketSystem; Trusted_Connection=True; MultipleActiveResultSets=true"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning"
        }
    },
    "AllowedHosts": "*"
}

// ==== Program.cs ====
using ConcertSystemInfrastructure;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// ������� ��� ��� ��� ���������� �� ���� �����
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<ConcertTicketSystemContext>(options =>
    options.UseSqlServer(connectionString));

// ���� ������
builder.Services.AddControllersWithViews();

var app = builder.Build();

// ������������ middleware
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Concerts}/{action=Index}/{id?}");

app.Run();

// ==== Controllers\ArtistsController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;
using System.Linq;
using System.Threading.Tasks;

namespace ConcertSystemInfrastructure.Controllers
{
    public class ArtistsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public ArtistsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Artists
        public async Task<IActionResult> Index()
        {
            ViewData["Artists"] = await _context.Artists.Select(a => a.FullName).Distinct().ToListAsync();
            ViewData["Genres"] = await _context.Genres.Select(g => g.Name).Distinct().ToListAsync();
            ViewData["Locations"] = await _context.Concerts.Select(c => c.Location).Distinct().ToListAsync();

            return View(await _context.Artists.ToListAsync());
        }

        // GET: Artists/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var artist = await _context.Artists
                .Include(a => a.Concerts)
                .ThenInclude(c => c.Genres)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (artist == null)
            {
                return NotFound();
            }

            return View(artist);
        }

        // GET: Artists/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Artists/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,FullName,SocialMedia")] Artist artist)
        {
            if (await _context.Artists.AnyAsync(a => a.FullName == artist.FullName))
            {
                ModelState.AddModelError("FullName", "Артист із такою назвою вже існує.");
            }

            if (await _context.Artists.AnyAsync(a => a.SocialMedia == artist.SocialMedia))
            {
                ModelState.AddModelError("SocialMedia", "Артист із такою соціальною мережею вже існує.");
            }

            if (ModelState.IsValid)
            {
                _context.Add(artist);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(artist);
        }

        // GET: Artists/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var artist = await _context.Artists.FindAsync(id);
            if (artist == null)
            {
                return NotFound();
            }
            return View(artist);
        }

        // POST: Artists/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,FullName,SocialMedia")] Artist artist)
        {
            if (id != artist.Id)
            {
                return NotFound();
            }

            if (await _context.Artists.AnyAsync(a => a.FullName == artist.FullName && a.Id != artist.Id))
            {
                ModelState.AddModelError("FullName", "Артист із такою назвою вже існує.");
            }

            if (await _context.Artists.AnyAsync(a => a.SocialMedia == artist.SocialMedia && a.Id != artist.Id))
            {
                ModelState.AddModelError("SocialMedia", "Артист із такою соціальною мережею вже існує.");
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(artist);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ArtistExists(artist.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(artist);
        }

        // GET: Artists/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var artist = await _context.Artists
                .FirstOrDefaultAsync(m => m.Id == id);
            if (artist == null)
            {
                return NotFound();
            }

            return View(artist);
        }

        // POST: Artists/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var artist = await _context.Artists.FindAsync(id);
            if (artist != null)
            {
                _context.Artists.Remove(artist);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ArtistExists(int id)
        {
            return _context.Artists.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\ChartsController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ChartsController : ControllerBase
    {
        private readonly ConcertTicketSystemContext _context;

        public ChartsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // Діаграма 1: Кількість концертів за роками
        private record ConcertsByYearResponseItem(string Year, int Count);

        [HttpGet("concertsByYear")]
        public async Task<JsonResult> GetConcertsByYearAsync(CancellationToken cancellationToken)
        {
            var responseItems = await _context.Concerts
                .GroupBy(concert => concert.ConcertDate.Year)
                .Select(group => new ConcertsByYearResponseItem(group.Key.ToString(), group.Count()))
                .ToListAsync(cancellationToken);
            return new JsonResult(responseItems);
        }

        // Діаграма 2: Кількість проданих квитків за жанрами
        private record TicketsByGenreResponseItem(string Genre, int Count);

        [HttpGet("ticketsByGenre")]
        public async Task<JsonResult> GetTicketsByGenreAsync(CancellationToken cancellationToken)
        {
            var responseItems = await _context.Tickets
                .Where(t => t.Status == "Sold")
                .Include(t => t.Concert)
                .ThenInclude(c => c.Genres)
                .SelectMany(t => t.Concert.Genres)
                .GroupBy(g => g.Name)
                .Select(group => new TicketsByGenreResponseItem(group.Key, group.Count()))
                .ToListAsync(cancellationToken);
            return new JsonResult(responseItems);
        }
    }
}

// ==== Controllers\ConcertsController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace ConcertSystemInfrastructure.Controllers
{
    public class ConcertsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public ConcertsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Concerts
        public async Task<IActionResult> Index(string artistFilter, string genreFilter, string locationFilter, DateTime? dateFilter)
        {
            ViewBag.Artists = await _context.Artists.Select(a => a.FullName).Distinct().ToListAsync();
            ViewBag.Genres = await _context.Genres.Select(g => g.Name).Distinct().ToListAsync();
            ViewBag.Locations = await _context.Concerts.Select(c => c.Location).Distinct().ToListAsync();

            var concerts = _context.Concerts
                .Include(c => c.Artist)
                .Include(c => c.Genres)
                .AsQueryable();

            if (!string.IsNullOrEmpty(artistFilter))
            {
                concerts = concerts.Where(c => c.Artist.FullName.Contains(artistFilter));
            }

            if (!string.IsNullOrEmpty(genreFilter))
            {
                concerts = concerts.Where(c => c.Genres.Any(g => g.Name == genreFilter));
            }

            if (!string.IsNullOrEmpty(locationFilter))
            {
                concerts = concerts.Where(c => c.Location.Contains(locationFilter));
            }

            if (dateFilter.HasValue)
            {
                concerts = concerts.Where(c => c.ConcertDate.Date == dateFilter.Value.Date);
            }

            return View(await concerts.ToListAsync());
        }

        // GET: Concerts/Create
        public IActionResult Create()
        {
            ViewBag.ArtistId = new SelectList(_context.Artists, "Id", "FullName");
            ViewBag.GenreIds = new SelectList(_context.Genres, "Id", "Name");
            return View();
        }

        // POST: Concerts/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,ArtistId,ConcertDate,Location,TotalTickets,AvailableTickets")] Concert concert, int[] GenreIds)
        {
            // Перевірка дати
            DateTime minAllowedDate = DateTime.Now.AddMonths(1);
            if (concert.ConcertDate < minAllowedDate)
            {
                ModelState.AddModelError("ConcertDate", "Концерт має бути запланований щонайменше за місяць від поточної дати");
            }

            // Перевірка кількості квитків
            if (concert.AvailableTickets > concert.TotalTickets)
            {
                ModelState.AddModelError("AvailableTickets", "Доступних квитків не може бути більше, ніж загальна кількість квитків");
            }
            ModelState.Remove("Artist");
            ModelState.Remove("Location");
            if (ModelState.IsValid)
            {
                // Додаємо концерт
                _context.Add(concert);
                await _context.SaveChangesAsync();

                // Створюємо квитки
                for (int i = 1; i <= concert.TotalTickets; i++)
                {
                    var ticket = new Ticket
                    {
                        ConcertId = concert.Id,
                        Row = "A",
                        SeatNumber = i,
                        BasePrice = 100,
                        Status = "Available"
                    };
                    _context.Tickets.Add(ticket);
                }
                await _context.SaveChangesAsync();

                // Додаємо жанри
                if (GenreIds != null)
                {
                    concert.Genres = await _context.Genres.Where(g => GenreIds.Contains(g.Id)).ToListAsync();
                    await _context.SaveChangesAsync();
                }

                return RedirectToAction(nameof(Index));
            }

            ViewBag.ArtistId = new SelectList(await _context.Artists.Select(a => new { a.Id, a.FullName }).ToListAsync(), "Id", "FullName");
            ViewBag.GenreIds = new SelectList(await _context.Genres.Select(g => new { g.Id, g.Name }).ToListAsync(), "Id", "Name");
            return View(concert);
        }

        // GET: Concerts/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var concert = await _context.Concerts.FindAsync(id);
            if (concert == null)
            {
                return NotFound();
            }

            ViewBag.ArtistId = new SelectList(await _context.Artists.Select(a => new { a.Id, a.FullName }).ToListAsync(), "Id", "FullName", concert.ArtistId);
            ViewBag.GenreIds = new SelectList(await _context.Genres.Select(g => new { g.Id, g.Name }).ToListAsync(), "Id", "Name");
            return View(concert);
        }

        // POST: Concerts/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,ArtistId,ConcertDate,Location,TotalTickets,AvailableTickets")] Concert concert, int[] GenreIds)
        {
            if (id != concert.Id)
            {
                return NotFound();
            }

            // Перевірка дати
            DateTime minAllowedDate = DateTime.Now.AddMonths(1);
            if (concert.ConcertDate < minAllowedDate)
            {
                ModelState.AddModelError("ConcertDate", "Концерт має бути запланований щонайменше за місяць від поточної дати");
            }

            // Перевірка кількості квитків
            if (concert.AvailableTickets > concert.TotalTickets)
            {
                ModelState.AddModelError("AvailableTickets", "Доступних квитків не може бути більше, ніж загальна кількість квитків");
            }
            ModelState.Remove("Artist");
            ModelState.Remove("Location");
            if (ModelState.IsValid)
            {
                try
                {
                    // Отримуємо оригінальний концерт
                    var originalConcert = await _context.Concerts
                        .Include(c => c.Tickets)
                        .FirstOrDefaultAsync(c => c.Id == concert.Id);

                    if (originalConcert == null)
                    {
                        return NotFound();
                    }

                    // Оновлюємо поля концерту
                    _context.Entry(originalConcert).CurrentValues.SetValues(concert);

                    // Синхронізуємо квитки
                    int currentTicketCount = originalConcert.Tickets.Count;
                    if (concert.TotalTickets > currentTicketCount)
                    {
                        // Додаємо нові квитки
                        for (int i = currentTicketCount + 1; i <= concert.TotalTickets; i++)
                        {
                            var ticket = new Ticket
                            {
                                ConcertId = concert.Id,
                                Row = "A",
                                SeatNumber = i,
                                BasePrice = 100,
                                Status = "Available"
                            };
                            _context.Tickets.Add(ticket);
                        }
                    }
                    else if (concert.TotalTickets < currentTicketCount)
                    {
                        // Видаляємо зайві квитки (тільки ті, що не продані)
                        var ticketsToRemove = originalConcert.Tickets
                            .Where(t => t.Status == "Available")
                            .OrderByDescending(t => t.SeatNumber)
                            .Take(currentTicketCount - concert.TotalTickets)
                            .ToList();

                        foreach (var ticket in ticketsToRemove)
                        {
                            _context.Tickets.Remove(ticket);
                        }
                    }

                    // Перевіряємо, чи AvailableTickets не перевищує нову кількість TotalTickets
                    if (concert.AvailableTickets > concert.TotalTickets)
                    {
                        concert.AvailableTickets = concert.TotalTickets;
                    }

                    await _context.SaveChangesAsync();

                    // Оновлюємо жанри
                    var existingGenres = await _context.Concerts
                        .Include(c => c.Genres)
                        .FirstOrDefaultAsync(c => c.Id == concert.Id);
                    if (existingGenres != null)
                    {
                        existingGenres.Genres.Clear();
                        if (GenreIds != null)
                        {
                            var newGenres = await _context.Genres.Where(g => GenreIds.Contains(g.Id)).ToListAsync();
                            foreach (var genre in newGenres)
                            {
                                existingGenres.Genres.Add(genre);
                            }
                        }
                        await _context.SaveChangesAsync();
                    }
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ConcertExists(concert.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }

            ViewBag.ArtistId = new SelectList(await _context.Artists.Select(a => new { a.Id, a.FullName }).ToListAsync(), "Id", "FullName", concert.ArtistId);
            ViewBag.GenreIds = new SelectList(await _context.Genres.Select(g => new { g.Id, g.Name }).ToListAsync(), "Id", "Name");
            return View(concert);
        }

        // GET: Concerts/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Delete(int id)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                // Завантажуємо концерт разом із усіма пов'язаними даними
                var concert = await _context.Concerts
                    .Include(c => c.Tickets)
                        .ThenInclude(t => t.PurchaseItems) // Додаємо завантаження PurchaseItems
                    .FirstOrDefaultAsync(c => c.Id == id);

                if (concert == null)
                {
                    return NotFound();
                }

                // Видаляємо всі пов'язані PurchaseItems
                foreach (var ticket in concert.Tickets)
                {
                    _context.PurchaseItems.RemoveRange(ticket.PurchaseItems);
                }

                // Видаляємо всі пов'язані Tickets
                _context.Tickets.RemoveRange(concert.Tickets);

                // Видаляємо сам концерт
                _context.Concerts.Remove(concert);

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                TempData["SuccessMessage"] = "Концерт успішно видалено!";
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                TempData["ErrorMessage"] = $"Помилка при видаленні концерту: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }
        // POST: Concerts/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                var concert = await _context.Concerts
                    .Include(c => c.Tickets)
                    .ThenInclude(t => t.PurchaseItems)
                    .FirstOrDefaultAsync(c => c.Id == id);

                if (concert == null)
                {
                    return NotFound();
                }

                // Видаляємо всі пов'язані PurchaseItems
                foreach (var ticket in concert.Tickets)
                {
                    _context.PurchaseItems.RemoveRange(ticket.PurchaseItems);
                }

                // Видаляємо всі пов'язані Tickets
                _context.Tickets.RemoveRange(concert.Tickets);

                // Видаляємо сам концерт
                _context.Concerts.Remove(concert);

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                TempData["SuccessMessage"] = "Концерт успішно видалено!";
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                TempData["ErrorMessage"] = $"Помилка при видаленні концерту: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }

        // GET: Concerts/BuyTicket/5
        public async Task<IActionResult> BuyTicket(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var concert = await _context.Concerts
                .Include(c => c.Artist)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (concert == null)
            {
                return NotFound();
            }

            if (concert.AvailableTickets <= 0)
            {
                TempData["ErrorMessage"] = "На жаль, квитки на цей концерт закінчилися.";
                return RedirectToAction(nameof(Index));
            }

            // Передаємо концерт у ViewBag для відображення інформації
            ViewBag.Concert = concert;
            // Передаємо список доступних квитків для концерту (якщо вони вже створені)
            ViewBag.Tickets = await _context.Tickets
                .Where(t => t.ConcertId == concert.Id && t.Status == "Available")
                .ToListAsync();

            // Повертаємо форму для введення даних глядача
            return View(new Spectator());
        }

        // POST: Concerts/BuyTicket/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> BuyTicket(int id, [Bind("FullName,Phone,Email")] Spectator spectator, int? ticketId)
        {
            // Отримуємо концерт з бази даних разом із квитками
            var concert = await _context.Concerts
                .Include(c => c.Tickets)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (concert == null)
            {
                return NotFound();
            }

            // Перевіряємо, чи є доступні квитки
            if (concert.AvailableTickets <= 0)
            {
                TempData["ErrorMessage"] = "На жаль, квитки на цей концерт закінчилися.";
                return RedirectToAction(nameof(Index));
            }

            // Починаємо транзакцію для забезпечення цілісності даних
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                // Перевіряємо, чи глядач уже існує за email
                var existingSpectator = await _context.Spectators
                    .FirstOrDefaultAsync(s => s.Email == spectator.Email);
                if (existingSpectator == null)
                {
                    // Якщо глядача немає, додаємо нового
                    if (!ModelState.IsValid)
                    {
                        ViewBag.Concert = concert;
                        ViewBag.Tickets = await _context.Tickets
                            .Where(t => t.ConcertId == concert.Id && t.Status == "Available")
                            .ToListAsync();
                        return View(spectator);
                    }
                    _context.Spectators.Add(spectator);
                    await _context.SaveChangesAsync();
                    existingSpectator = spectator;
                }

                // Вибираємо квиток: або за ticketId, або перший доступний
                var ticket = ticketId.HasValue
                    ? await _context.Tickets.FirstOrDefaultAsync(t => t.Id == ticketId.Value && t.Status == "Available")
                    : await _context.Tickets.FirstOrDefaultAsync(t => t.ConcertId == concert.Id && t.Status == "Available");

                if (ticket == null)
                {
                    TempData["ErrorMessage"] = "Немає доступних квитків для цього концерту.";
                    return RedirectToAction(nameof(Index));
                }

                // Створюємо запис про покупку
                var purchase = new Purchase
                {
                    SpectatorId = existingSpectator.Id,
                    PurchaseDate = DateTime.Now,
                    Status = "Completed"
                };
                _context.Purchases.Add(purchase);
                await _context.SaveChangesAsync();

                // Створюємо елемент покупки
                var purchaseItem = new PurchaseItem
                {
                    PurchaseId = purchase.Id,
                    TicketId = ticket.Id,
                    Quantity = 1,
                    Price = ticket.BasePrice
                };
                _context.PurchaseItems.Add(purchaseItem);

                // Оновлюємо статус квитка та кількість доступних квитків
                ticket.Status = "Sold";
                concert.AvailableTickets--;
                _context.Update(ticket);
                _context.Update(concert);

                // Зберігаємо всі зміни в базі даних
                await _context.SaveChangesAsync();

                // Підтверджуємо транзакцію
                await transaction.CommitAsync();

                TempData["SuccessMessage"] = "Квиток успішно куплено!";
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                // У разі помилки відкочуємо транзакцію
                await transaction.RollbackAsync();
                TempData["ErrorMessage"] = $"Помилка при покупці: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }

        private bool ConcertExists(int id)
        {
            return _context.Concerts.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\GenresController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    public class GenresController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public GenresController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Genres
        public async Task<IActionResult> Index()
        {
            return View(await _context.Genres.ToListAsync());
        }

        // GET: Genres/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var genre = await _context.Genres
                .FirstOrDefaultAsync(m => m.Id == id);
            if (genre == null)
            {
                return NotFound();
            }

            return View(genre);
        }

        // GET: Genres/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Genres/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Name,Id")] Genre genre)
        {
            if (ModelState.IsValid)
            {
                _context.Add(genre);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(genre);
        }

        // GET: Genres/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var genre = await _context.Genres.FindAsync(id);
            if (genre == null)
            {
                return NotFound();
            }
            return View(genre);
        }

        // POST: Genres/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Name,Id")] Genre genre)
        {
            if (id != genre.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(genre);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!GenreExists(genre.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(genre);
        }

        // GET: Genres/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var genre = await _context.Genres
                .FirstOrDefaultAsync(m => m.Id == id);
            if (genre == null)
            {
                return NotFound();
            }

            return View(genre);
        }

        // POST: Genres/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var genre = await _context.Genres.FindAsync(id);
            if (genre != null)
            {
                _context.Genres.Remove(genre);
                await _context.SaveChangesAsync();
            }

            return RedirectToAction(nameof(Index));
        }

        private bool GenreExists(int id)
        {
            return _context.Genres.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\HomeController.cs ====
using ConcertSystemInfrastructure.Models;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;

    public HomeController(ILogger<HomeController> logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        // ��������������� �� ������� � ����������
        return RedirectToAction("Index", "Concerts");
    }

    public IActionResult Privacy()
    {
        return View();
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}

// ==== Controllers\PurchaseItemsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    public class PurchaseItemsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public PurchaseItemsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: PurchaseItems
        public async Task<IActionResult> Index()
        {
            var concertTicketSystemContext = _context.PurchaseItems.Include(p => p.Purchase).Include(p => p.Ticket);
            return View(await concertTicketSystemContext.ToListAsync());
        }

        // GET: PurchaseItems/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchaseItem = await _context.PurchaseItems
                .Include(p => p.Purchase)
                .Include(p => p.Ticket)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (purchaseItem == null)
            {
                return NotFound();
            }

            return View(purchaseItem);
        }

        // GET: PurchaseItems/Create
        public IActionResult Create()
        {
            ViewData["PurchaseId"] = new SelectList(_context.Purchases, "Id", "Status");
            ViewData["TicketId"] = new SelectList(_context.Tickets, "Id", "Status");
            return View();
        }

        // POST: PurchaseItems/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("PurchaseId,TicketId,Quantity,Price,Id")] PurchaseItem purchaseItem)
        {
            if (ModelState.IsValid)
            {
                _context.Add(purchaseItem);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["PurchaseId"] = new SelectList(_context.Purchases, "Id", "Status", purchaseItem.PurchaseId);
            ViewData["TicketId"] = new SelectList(_context.Tickets, "Id", "Status", purchaseItem.TicketId);
            return View(purchaseItem);
        }

        // GET: PurchaseItems/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchaseItem = await _context.PurchaseItems.FindAsync(id);
            if (purchaseItem == null)
            {
                return NotFound();
            }
            ViewData["PurchaseId"] = new SelectList(_context.Purchases, "Id", "Status", purchaseItem.PurchaseId);
            ViewData["TicketId"] = new SelectList(_context.Tickets, "Id", "Status", purchaseItem.TicketId);
            return View(purchaseItem);
        }

        // POST: PurchaseItems/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("PurchaseId,TicketId,Quantity,Price,Id")] PurchaseItem purchaseItem)
        {
            if (id != purchaseItem.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(purchaseItem);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!PurchaseItemExists(purchaseItem.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["PurchaseId"] = new SelectList(_context.Purchases, "Id", "Status", purchaseItem.PurchaseId);
            ViewData["TicketId"] = new SelectList(_context.Tickets, "Id", "Status", purchaseItem.TicketId);
            return View(purchaseItem);
        }

        // GET: PurchaseItems/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchaseItem = await _context.PurchaseItems
                .Include(p => p.Purchase)
                .Include(p => p.Ticket)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (purchaseItem == null)
            {
                return NotFound();
            }

            return View(purchaseItem);
        }

        // POST: PurchaseItems/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var purchaseItem = await _context.PurchaseItems.FindAsync(id);
            if (purchaseItem != null)
            {
                _context.PurchaseItems.Remove(purchaseItem);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool PurchaseItemExists(int id)
        {
            return _context.PurchaseItems.Any(e => e.Id == id);
        }
    }
}


// ==== Controllers\PurchasesController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    public class PurchasesController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public PurchasesController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Purchases
        public async Task<IActionResult> Index()
        {
            var concertTicketSystemContext = _context.Purchases.Include(p => p.Spectator);
            return View(await concertTicketSystemContext.ToListAsync());
        }

        // GET: Purchases/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchase = await _context.Purchases
                .Include(p => p.Spectator)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (purchase == null)
            {
                return NotFound();
            }

            return View(purchase);
        }

        // GET: Purchases/Create
        public IActionResult Create()
        {
            ViewData["SpectatorId"] = new SelectList(_context.Spectators, "Id", "Email");
            return View();
        }

        // POST: Purchases/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("SpectatorId,PurchaseDate,Status,Id")] Purchase purchase)
        {
            if (ModelState.IsValid)
            {
                _context.Add(purchase);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["SpectatorId"] = new SelectList(_context.Spectators, "Id", "Email", purchase.SpectatorId);
            return View(purchase);
        }

        // GET: Purchases/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchase = await _context.Purchases.FindAsync(id);
            if (purchase == null)
            {
                return NotFound();
            }
            ViewData["SpectatorId"] = new SelectList(_context.Spectators, "Id", "Email", purchase.SpectatorId);
            return View(purchase);
        }

        // POST: Purchases/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("SpectatorId,PurchaseDate,Status,Id")] Purchase purchase)
        {
            if (id != purchase.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(purchase);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!PurchaseExists(purchase.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["SpectatorId"] = new SelectList(_context.Spectators, "Id", "Email", purchase.SpectatorId);
            return View(purchase);
        }

        // GET: Purchases/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchase = await _context.Purchases
                .Include(p => p.Spectator)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (purchase == null)
            {
                return NotFound();
            }

            return View(purchase);
        }

        // POST: Purchases/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var purchase = await _context.Purchases.FindAsync(id);
            if (purchase != null)
            {
                _context.Purchases.Remove(purchase);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool PurchaseExists(int id)
        {
            return _context.Purchases.Any(e => e.Id == id);
        }
    }
}


// ==== Controllers\ReportsController.cs ====
using ConcertSystemDomain.Model;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OfficeOpenXml;
using ConcertSystemDomain.Model; // Змінити на ваш namespace
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace ConcertSystemInfrastructure.Controllers
{
    public class ReportsController : Controller
    {
        private readonly ConcertTicketSystemContext _context; 

        public ReportsController(ConcertTicketSystemContext context)
        {
            _context = context;
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; 
        }

        
        public IActionResult Index()
        {
            return View();
        }

        // POST: Імпорт з Excel
        [HttpPost]
        public async Task<IActionResult> ImportExcel(IFormFile file, string tableName)
        {
            if (file == null || file.Length == 0)
            {
                TempData["ErrorMessage"] = "Будь ласка, виберіть файл для імпорту.";
                return RedirectToAction(nameof(Index));
            }

            if (tableName != "Concerts") 
            {
                TempData["ErrorMessage"] = "Непідтримувана таблиця.";
                return RedirectToAction(nameof(Index));
            }

            using (var stream = file.OpenReadStream())
            using (var package = new ExcelPackage(stream))
            {
                var worksheet = package.Workbook.Worksheets[0];
                int rowCount = worksheet.Dimension.Rows;

                for (int row = 2; row <= rowCount; row++) // Пропускаємо заголовок
                {
                    var concert = new Concert 
                    {
                        ArtistId = int.TryParse(worksheet.Cells[row, 1].Value?.ToString(), out int artistId) ? artistId : 0,
                        ConcertDate = DateTime.TryParse(worksheet.Cells[row, 2].Value?.ToString(), out DateTime date) ? date : DateTime.Now,
                        Location = worksheet.Cells[row, 3].Value?.ToString(),
                        TotalTickets = int.TryParse(worksheet.Cells[row, 4].Value?.ToString(), out int total) ? total : 0,
                        AvailableTickets = int.TryParse(worksheet.Cells[row, 5].Value?.ToString(), out int available) ? available : 0
                    };

                    if (concert.ArtistId > 0 && !string.IsNullOrEmpty(concert.Location))
                    {
                        _context.Concerts.Add(concert); 
                    }
                }

                await _context.SaveChangesAsync();
            }

            TempData["SuccessMessage"] = "Концерти успішно імпортовано!";
            return RedirectToAction("Index", "Concerts"); 
        }

        // GET: Експорт у Excel
        public async Task<IActionResult> ExportExcel(string tableName)
        {
            if (tableName != "Concerts")
            {
                return BadRequest("Непідтримувана таблиця.");
            }

            var concerts = await _context.Concerts.ToListAsync(); 
            using (var package = new ExcelPackage())
            {
                var worksheet = package.Workbook.Worksheets.Add("Concerts");
                worksheet.Cells[1, 1].Value = "ArtistId";
                worksheet.Cells[1, 2].Value = "Concert Date";
                worksheet.Cells[1, 3].Value = "Location";
                worksheet.Cells[1, 4].Value = "Total Tickets";
                worksheet.Cells[1, 5].Value = "Available Tickets";

                for (int i = 0; i < concerts.Count; i++)
                {
                    worksheet.Cells[i + 2, 1].Value = concerts[i].ArtistId;
                    worksheet.Cells[i + 2, 2].Value = concerts[i].ConcertDate.ToString("yyyy-MM-dd HH:mm");
                    worksheet.Cells[i + 2, 3].Value = concerts[i].Location;
                    worksheet.Cells[i + 2, 4].Value = concerts[i].TotalTickets;
                    worksheet.Cells[i + 2, 5].Value = concerts[i].AvailableTickets;
                }

                worksheet.Cells.AutoFitColumns();
                var stream = new MemoryStream(package.GetAsByteArray());
                string fileName = $"ConcertsReport_{DateTime.Now:yyyyMMdd}.xlsx";
                return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", fileName);
            }
        }

        // POST: Імпорт з DOCX
        [HttpPost]
        public async Task<IActionResult> ImportDocx(IFormFile file, string tableName)
        {
            if (file == null || file.Length == 0)
            {
                TempData["ErrorMessage"] = "Будь ласка, виберіть файл для імпорту.";
                return RedirectToAction(nameof(Index));
            }

            if (tableName != "Concerts")
            {
                TempData["ErrorMessage"] = "Непідтримувана таблиця.";
                return RedirectToAction(nameof(Index));
            }

            using (var stream = file.OpenReadStream())
            using (WordprocessingDocument doc = WordprocessingDocument.Open(stream, false))
            {
                string text = doc.MainDocumentPart.Document.Body.InnerText;
                var lines = text.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);

                foreach (var line in lines.Skip(1)) 
                {
                    var parts = line.Split('|');
                    if (parts.Length >= 5)
                    {
                        var concert = new Concert 
                        {
                            ArtistId = int.TryParse(parts[0].Trim(), out int artistId) ? artistId : 0,
                            ConcertDate = DateTime.TryParse(parts[1].Trim(), out DateTime date) ? date : DateTime.Now,
                            Location = parts[2].Trim(),
                            TotalTickets = int.TryParse(parts[3].Trim(), out int total) ? total : 0,
                            AvailableTickets = int.TryParse(parts[4].Trim(), out int available) ? available : 0
                        };

                        if (concert.ArtistId > 0 && !string.IsNullOrEmpty(concert.Location))
                        {
                            _context.Concerts.Add(concert); 
                        }
                    }
                }

                await _context.SaveChangesAsync();
            }

            TempData["SuccessMessage"] = "Концерти успішно імпортовано з DOCX!";
            return RedirectToAction("Index", "Concerts"); 
        }

        // GET: Експорт у DOCX
        public async Task<IActionResult> ExportDocx(string tableName)
        {
            if (tableName != "Concerts")
            {
                return BadRequest("Непідтримувана таблиця.");
            }

            var concerts = await _context.Concerts.ToListAsync(); 
            var stream = new MemoryStream();
            using (WordprocessingDocument doc = WordprocessingDocument.Create(stream, WordprocessingDocumentType.Document))
            {
                MainDocumentPart mainPart = doc.AddMainDocumentPart();
                mainPart.Document = new Document();
                Body body = mainPart.Document.AppendChild(new Body());

                Paragraph title = body.AppendChild(new Paragraph());
                Run titleRun = title.AppendChild(new Run());
                titleRun.AppendChild(new Text("Звіт про концерти"));

                foreach (var concert in concerts)
                {
                    Paragraph para = body.AppendChild(new Paragraph());
                    Run run = para.AppendChild(new Run());
                    run.AppendChild(new Text($"{concert.ArtistId} | {concert.ConcertDate:yyyy-MM-dd HH:mm} | {concert.Location} | {concert.TotalTickets} | {concert.AvailableTickets}"));
                }
            }

            stream.Position = 0;
            string fileName = $"ConcertsReport_{DateTime.Now:yyyyMMdd}.docx";
            return File(stream, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", fileName);
        }
    }
}

// ==== Controllers\SpectatorsController.cs ====
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;

namespace ConcertSystemInfrastructure.Controllers
{
    public class SpectatorsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public SpectatorsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> Index()
        {
            return View(await _context.Spectators.ToListAsync());
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("FullName,Phone,Email")] Spectator spectator)
        {
            // Перевірка унікальності ПІБ
            if (await _context.Spectators.AnyAsync(s => s.FullName == spectator.FullName))
            {
                ModelState.AddModelError("FullName", "Глядач із таким ПІБ уже існує.");
            }

            // Перевірка унікальності телефону
            if (!string.IsNullOrEmpty(spectator.Phone) && await _context.Spectators.AnyAsync(s => s.Phone == spectator.Phone))
            {
                ModelState.AddModelError("Phone", "Глядач із таким номером телефону уже існує.");
            }

            // Перевірка унікальності email
            if (await _context.Spectators.AnyAsync(s => s.Email == spectator.Email))
            {
                ModelState.AddModelError("Email", "Глядач із такою електронною поштою уже існує.");
            }

            // Кастомна валідація номера телефону
            if (!string.IsNullOrEmpty(spectator.Phone) && (spectator.Phone.Length != 13 || !spectator.Phone.StartsWith("+") || !spectator.Phone.Substring(1).All(char.IsDigit)))
            {
                ModelState.AddModelError("Phone", "Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).");
            }

            if (ModelState.IsValid)
            {
                _context.Add(spectator);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(spectator);
        }

        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();

            var spectator = await _context.Spectators.FindAsync(id);
            if (spectator == null) return NotFound();
            return View(spectator);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,FullName,Phone,Email")] Spectator spectator)
        {
            if (id != spectator.Id) return NotFound();

            // Перевірка унікальності ПІБ (крім поточного запису)
            if (await _context.Spectators.AnyAsync(s => s.FullName == spectator.FullName && s.Id != spectator.Id))
            {
                ModelState.AddModelError("FullName", "Глядач із таким ПІБ уже існує.");
            }

            // Перевірка унікальності телефону (крім поточного запису)
            if (!string.IsNullOrEmpty(spectator.Phone) && await _context.Spectators.AnyAsync(s => s.Phone == spectator.Phone && s.Id != spectator.Id))
            {
                ModelState.AddModelError("Phone", "Глядач із таким номером телефону уже існує.");
            }

            // Перевірка унікальності email (крім поточного запису)
            if (await _context.Spectators.AnyAsync(s => s.Email == spectator.Email && s.Id != spectator.Id))
            {
                ModelState.AddModelError("Email", "Глядач із такою електронною поштою уже існує.");
            }

            // Кастомна валідація номера телефону
            if (!string.IsNullOrEmpty(spectator.Phone) && (spectator.Phone.Length != 13 || !spectator.Phone.StartsWith("+") || !spectator.Phone.Substring(1).All(char.IsDigit)))
            {
                ModelState.AddModelError("Phone", "Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).");
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(spectator);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!SpectatorExists(spectator.Id)) return NotFound();
                    throw;
                }
                return RedirectToAction(nameof(Index));
            }
            return View(spectator);
        }

        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();

            var spectator = await _context.Spectators.FirstOrDefaultAsync(m => m.Id == id);
            if (spectator == null) return NotFound();

            return View(spectator);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var spectator = await _context.Spectators.FindAsync(id);
            if (spectator != null)
            {
                _context.Spectators.Remove(spectator);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }

        private bool SpectatorExists(int id)
        {
            return _context.Spectators.Any(e => e.Id == id);
        }
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var spectator = await _context.Spectators
                .Include(s => s.Purchases)
                .ThenInclude(p => p.PurchaseItems)
                .ThenInclude(pi => pi.Ticket)
                .ThenInclude(t => t.Concert)
                .ThenInclude(c => c.Artist)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (spectator == null)
            {
                return NotFound();
            }

            return View(spectator);
        }
    }
}

// ==== Controllers\TicketsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    public class TicketsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public TicketsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Tickets
        public async Task<IActionResult> Index()
        {
            var concertTicketSystemContext = _context.Tickets.Include(t => t.Concert);
            return View(await concertTicketSystemContext.ToListAsync());
        }

        // GET: Tickets/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ticket = await _context.Tickets
                .Include(t => t.Concert)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (ticket == null)
            {
                return NotFound();
            }

            return View(ticket);
        }

        // GET: Tickets/Create
        public IActionResult Create()
        {
            ViewData["ConcertId"] = new SelectList(_context.Concerts, "Id", "Location");
            return View();
        }

        // POST: Tickets/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("ConcertId,Row,SeatNumber,BasePrice,Status,Id")] Ticket ticket)
        {
            if (ModelState.IsValid)
            {
                _context.Add(ticket);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["ConcertId"] = new SelectList(_context.Concerts, "Id", "Location", ticket.ConcertId);
            return View(ticket);
        }

        // GET: Tickets/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ticket = await _context.Tickets.FindAsync(id);
            if (ticket == null)
            {
                return NotFound();
            }
            ViewData["ConcertId"] = new SelectList(_context.Concerts, "Id", "Location", ticket.ConcertId);
            return View(ticket);
        }

        // POST: Tickets/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("ConcertId,Row,SeatNumber,BasePrice,Status,Id")] Ticket ticket)
        {
            if (id != ticket.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(ticket);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!TicketExists(ticket.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["ConcertId"] = new SelectList(_context.Concerts, "Id", "Location", ticket.ConcertId);
            return View(ticket);
        }

        // GET: Tickets/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ticket = await _context.Tickets
                .Include(t => t.Concert)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (ticket == null)
            {
                return NotFound();
            }

            return View(ticket);
        }

        // POST: Tickets/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var ticket = await _context.Tickets.FindAsync(id);
            if (ticket != null)
            {
                _context.Tickets.Remove(ticket);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool TicketExists(int id)
        {
            return _context.Tickets.Any(e => e.Id == id);
        }
    }
}


// ==== Models\ErrorViewModel.cs ====
namespace ConcertSystemInfrastructure.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}


// ==== Views\_ViewImports.cshtml ====
@using ConcertSystemInfrastructure
@using ConcertSystemInfrastructure.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


// ==== Views\_ViewStart.cshtml ====
@{
    Layout = "_Layout";
}


// ==== Views\Artists\Create.cshtml ====
@model ConcertSystemDomain.Model.Artist

@{
    ViewData["Title"] = "Додати артиста";
}

<h1>Додати артиста</h1>

<h4>Артист</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <!-- Видаляємо asp-validation-summary -->
            <div class="form-group">
                <label asp-for="FullName" class="control-label"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SocialMedia" class="control-label"></label>
                <input asp-for="SocialMedia" class="form-control" />
                <span asp-validation-for="SocialMedia" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Artists\Delete.cshtml ====
@model ConcertSystemDomain.Model.Artist

@{
    ViewData["Title"] = "Видалити артиста";
}

<h1>Видалити артиста</h1>

<h3>Ви впевнені, що хочете видалити цього артиста?</h3>
<div>
    <h4>Артист</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FullName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FullName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.SocialMedia)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.SocialMedia)
        </dd>
    </dl>

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Artists\Details.cshtml ====
@model ConcertSystemDomain.Model.Artist

@{
    ViewData["Title"] = "Всі концерти артиста";
}

<h1>Всі концерти артиста: @Html.DisplayFor(model => model.FullName)</h1>

<div>
    <hr />
    @if (Model.Concerts.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Дата концерту</th>
                    <th>Місто проведення</th>
                    <th>Загальна кількість квитків</th>
                    <th>Доступні квитки</th>
                    <th>Жанри</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var concert in Model.Concerts)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => concert.ConcertDate)</td>
                        <td>@Html.DisplayFor(modelItem => concert.Location)</td>
                        <td>@Html.DisplayFor(modelItem => concert.TotalTickets)</td>
                        <td>@Html.DisplayFor(modelItem => concert.AvailableTickets)</td>
                        <td>
                            @foreach (var genre in concert.Genres)
                            {
                                <span>@genre.Name</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Цей артист поки що не має концертів.</p>
    }
</div>

<div>
    <a asp-action="Index">Повернутися до списку артистів</a>
</div>

// ==== Views\Artists\Edit.cshtml ====
@model ConcertSystemDomain.Model.Artist

@{
    ViewData["Title"] = "Редагувати артиста";
}

<h1>Редагувати артиста</h1>

<h4>Артист</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <!-- Видаляємо asp-validation-summary -->
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="FullName" class="control-label"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SocialMedia" class="control-label"></label>
                <input asp-for="SocialMedia" class="form-control" />
                <span asp-validation-for="SocialMedia" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Artists\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Artist>

@{
    ViewData["Title"] = "Артисти";
}

<h1>Артисти</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Додати артиста</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.FullName)</th> <!-- Автоматично відобразиться "Назва" -->
            <th>@Html.DisplayNameFor(model => model.SocialMedia)</th>
            <th>Дії</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.FullName)</td>
                <td>@Html.DisplayFor(modelItem => item.SocialMedia)</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-secondary">Редагувати</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Видалити</a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">Всі концерти артиста</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Concerts\BuyTicket.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Купити квиток";
    var concert = ViewBag.Concert as ConcertSystemDomain.Model.Concert;
    var tickets = ViewBag.Tickets as List<ConcertSystemDomain.Model.Ticket>;
}

<h1>Купити квиток на концерт</h1>

<h4>@concert.Artist.FullName - @concert.Location, @concert.ConcertDate.ToString("dd.MM.yyyy HH:mm")</h4>
<p>Доступно квитків: @concert.AvailableTickets</p>
<hr />

<div class="row">
    <div class="col-md-6">
        <form asp-action="BuyTicket" asp-route-id="@concert.Id">
            <div class="form-group">
                <label asp-for="FullName" class="control-label">Повне ім'я</label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Phone" class="control-label">Телефон (опціонально)</label>
                <input asp-for="Phone" class="form-control" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label">Email</label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            @if (tickets != null && tickets.Any())
            {
                <div class="form-group">
                    <label class="control-label">Виберіть квиток</label>
                    <select name="ticketId" class="form-control">
                        @foreach (var ticket in tickets)
                        {
                            <option value="@ticket.Id">
                                Ряд: @ticket.Row, Місце: @ticket.SeatNumber, Ціна: @ticket.BasePrice
                            </option>
                        }
                    </select>
                </div>
            }

            <div class="form-group">
                <input type="submit" value="Купити" class="btn btn-success" />
                <a asp-action="Index" class="btn btn-secondary">Скасувати</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Concerts\Create.cshtml ====
@model ConcertSystemDomain.Model.Concert

@{
    ViewData["Title"] = "Додати подію";
}

<!-- Тимчасовий стиль для прокручування -->
<style>
    html, body {
        height: 100%;
        overflow-y: auto;
    }

    .row {
        min-height: 100%;
    }

    .validation-message {
        font-size: 0.9em;
        margin-top: 5px;
        display: block;
    }
</style>

<h1>Додати подію</h1>

<h4>Подія</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create">
            <div class="form-group">
                <label class="control-label">Артист</label>
                <select asp-for="ArtistId" class="form-control" asp-items="ViewBag.ArtistId"></select>
                <span asp-validation-for="ArtistId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Дата події</label>
                <input asp-for="ConcertDate" class="form-control" type="datetime-local" />
                <small id="concertDateHelp" class="form-text text-muted validation-message">Подія має бути запланована щонайменше за місяць від поточної дати</small>
            </div>
            <div class="form-group">
                <label class="control-label">Місто проведення</label>
                <input asp-for="Location" class="form-control" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Загальна кількість квитків</label>
                <input asp-for="TotalTickets" class="form-control" type="number" />
                <span asp-validation-for="TotalTickets" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Доступні квитки</label>
                <input asp-for="AvailableTickets" class="form-control" type="number" />
                <span asp-validation-for="AvailableTickets" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Жанри</label>
                <select name="GenreIds" class="form-control" multiple asp-items="ViewBag.GenreIds"></select>
                <small class="form-text text-muted">Утримуйте Ctrl (Cmd на Mac), щоб вибрати кілька жанрів</small>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            var concertDateInput = $("#ConcertDate");
            var helpText = $("#concertDateHelp");

            function validateDate() {
                var selectedDate = new Date(concertDateInput.val());
                var minAllowedDate = new Date();
                minAllowedDate.setMonth(minAllowedDate.getMonth() + 1);

                if (selectedDate < minAllowedDate) {
                    helpText.removeClass("text-muted").addClass("text-danger");
                    concertDateInput.addClass("is-invalid");
                } else {
                    helpText.removeClass("text-danger").addClass("text-muted");
                    concertDateInput.removeClass("is-invalid");
                }
            }

            concertDateInput.on("change", validateDate);

            $("form").on("submit", function (e) {
                validateDate();
                if (concertDateInput.hasClass("is-invalid")) {
                    e.preventDefault();
                }
            });
        });
    </script>
}

// ==== Views\Concerts\Delete.cshtml ====
@model ConcertSystemDomain.Model.Concert

@{
    ViewData["Title"] = "Видалити концерт";
}

<h1>Видалити концерт</h1>

<h3>Ви впевнені, що хочете видалити цей концерт?</h3>
<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ConcertDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ConcertDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Location)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TotalTickets)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TotalTickets)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.AvailableTickets)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AvailableTickets)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Artist)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Artist.FullName)
        </dd>
        <dt class="col-sm-2">
            Жанри
        </dt>
        <dd class="col-sm-10">
            @foreach (var genre in Model.Genres)
            {
                <span>@genre.Name</span>
            }
        </dd>
    </dl>

    @if (ViewData["HasTickets"] as bool? == true)
    {
        <div class="alert alert-warning">
            <strong>Увага!</strong> Цей концерт має пов'язані квитки. Вони будуть видалені разом із концертом.
        </div>
    }

    @if (ViewData["HasPurchases"] as bool? == true)
    {
        <div class="alert alert-danger">
            <strong>Увага!</strong> Цей концерт має пов'язані покупки. Вони будуть видалені разом із концертом.
        </div>
    }

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Concerts\Details.cshtml ====
@model ConcertSystemDomain.Model.Concert

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Concert</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ConcertDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ConcertDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Location)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Location)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TotalTickets)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TotalTickets)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.AvailableTickets)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.AvailableTickets)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Artist)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Artist.FullName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


// ==== Views\Concerts\Edit.cshtml ====
@model ConcertSystemDomain.Model.Concert

@{
    ViewData["Title"] = "Редагувати подію";
}

<h1>Редагувати подію</h1>

<h4>Подія</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label class="control-label">Артист</label>
                <select asp-for="ArtistId" class="form-control" asp-items="ViewBag.ArtistId"></select>
                <span asp-validation-for="ArtistId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Дата події</label>
                <input asp-for="ConcertDate" class="form-control" type="datetime-local" />
                <small id="concertDateHelp" class="form-text text-muted validation-message">Подія має бути запланована щонайменше за місяць від поточної дати</small>
            </div>
            <div class="form-group">
                <label class="control-label">Місто проведення</label>
                <input asp-for="Location" class="form-control" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Загальна кількість квитків</label>
                <input asp-for="TotalTickets" class="form-control" type="number" />
                <span asp-validation-for="TotalTickets" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Доступні квитки</label>
                <input asp-for="AvailableTickets" class="form-control" type="number" />
                <span asp-validation-for="AvailableTickets" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Жанри</label>
                <select name="GenreIds" class="form-control" multiple asp-items="ViewBag.GenreIds"></select>
                <small class="form-text text-muted">Утримуйте Ctrl (Cmd на Mac), щоб вибрати кілька жанрів</small>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            var concertDateInput = $("#ConcertDate");
            var helpText = $("#concertDateHelp");

            function validateDate() {
                var selectedDate = new Date(concertDateInput.val());
                var minAllowedDate = new Date();
                minAllowedDate.setMonth(minAllowedDate.getMonth() + 1);

                if (selectedDate < minAllowedDate) {
                    helpText.removeClass("text-muted").addClass("text-danger");
                    concertDateInput.addClass("is-invalid");
                } else {
                    helpText.removeClass("text-danger").addClass("text-muted");
                    concertDateInput.removeClass("is-invalid");
                }
            }

            concertDateInput.on("change", validateDate);

            $("form").on("submit", function (e) {
                validateDate();
                if (concertDateInput.hasClass("is-invalid")) {
                    e.preventDefault();
                }
            });

            validateDate();
        });
    </script>
}

// ==== Views\Concerts\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Concert>

@{
    ViewData["Title"] = "Події";
}

<h1>Події</h1>

<!-- Відображення повідомлень -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<p>
    <a asp-action="Create" class="btn btn-primary">Додати подію</a>
</p>

<!-- Діаграми -->
<div class="row">
    <div class="col-md-6">
        <h3>Кількість концертів за роками</h3>
        <div id="concertsByYearChart"></div>
    </div>
    <div class="col-md-6">
        <h3>Кількість проданих квитків за жанрами</h3>
        <div id="ticketsByGenreChart"></div>
    </div>
</div>

<!-- Перевірка, чи є події -->
@if (Model.Any())
{
    <!-- Таблиця подій -->
    <table class="table">
        <thead>
            <tr>
                <th>Дата події</th>
                <th>Місто проведення</th>
                <th>Загальна кількість квитків</th>
                <th>Доступні квитки</th>
                <th>Артист</th>
                <th>Жанри</th>
                <th>Дії</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.ConcertDate)</td>
                    <td>@Html.DisplayFor(modelItem => item.Location)</td>
                    <td>@Html.DisplayFor(modelItem => item.TotalTickets)</td>
                    <td>@Html.DisplayFor(modelItem => item.AvailableTickets)</td>
                    <td>@Html.DisplayFor(modelItem => item.Artist.FullName)</td>
                    <td>
                        @foreach (var genre in item.Genres)
                        {
                            <span>@genre.Name</span>
                        }
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-secondary">Редагувати</a>
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Видалити</a>
                        <a asp-action="BuyTicket" asp-route-id="@item.Id" class="btn btn-sm btn-success">Купити квиток</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info" role="alert">
        Вибачте, схожих подій немає, оберіть інші фільтри.
    </div>
}

@section Scripts {
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawCharts);

        function drawCharts() {
            // Діаграма 1: Кількість концертів за роками
            fetch('/api/charts/concertsByYear')
                .then(response => response.json())
                .then(data => {
                    const dataTable = new google.visualization.DataTable();
                    dataTable.addColumn('string', 'Рік');
                    dataTable.addColumn('number', 'Кількість концертів');

                    data.forEach(item => {
                        dataTable.addRow([item.year, item.count]);
                    });

                    const options = {
                        title: 'Концерти за роками',
                        width: 600,
                        height: 400,
                        legend: { position: 'none' }
                    };

                    const chart = new google.visualization.ColumnChart(document.getElementById('concertsByYearChart'));
                    chart.draw(dataTable, options);
                });

            // Діаграма 2: Кількість проданих квитків за жанрами
            fetch('/api/charts/ticketsByGenre')
                .then(response => response.json())
                .then(data => {
                    const dataTable = new google.visualization.DataTable();
                    dataTable.addColumn('string', 'Жанр');
                    dataTable.addColumn('number', 'Кількість проданих квитків');

                    data.forEach(item => {
                        dataTable.addRow([item.genre, item.count]);
                    });

                    const options = {
                        title: 'Продані квитки за жанрами',
                        width: 600,
                        height: 400,
                        legend: { position: 'none' }

                    };

                    const chart = new google.visualization.ColumnChart(document.getElementById('ticketsByGenreChart'));
                    chart.draw(dataTable, options);
                });
        }
    </script>
}

// ==== Views\Genres\Create.cshtml ====
@model ConcertSystemDomain.Model.Genre

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Genre</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Genres\Delete.cshtml ====
@model ConcertSystemDomain.Model.Genre

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Genre</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>


// ==== Views\Genres\Details.cshtml ====
@model ConcertSystemDomain.Model.Genre

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Genre</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


// ==== Views\Genres\Edit.cshtml ====
@model ConcertSystemDomain.Model.Genre

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Genre</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Genres\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Genre>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Home\Index.cshtml ====


// ==== Views\Home\Privacy.cshtml ====
@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>


// ==== Views\PurchaseItems\Create.cshtml ====
@model ConcertSystemDomain.Model.PurchaseItem

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>PurchaseItem</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="PurchaseId" class="control-label"></label>
                <select asp-for="PurchaseId" class ="form-control" asp-items="ViewBag.PurchaseId"></select>
            </div>
            <div class="form-group">
                <label asp-for="TicketId" class="control-label"></label>
                <select asp-for="TicketId" class ="form-control" asp-items="ViewBag.TicketId"></select>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\PurchaseItems\Delete.cshtml ====
@model ConcertSystemDomain.Model.PurchaseItem

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>PurchaseItem</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Quantity)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Quantity)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Price)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Purchase)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Purchase.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Ticket)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Ticket.Status)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>


// ==== Views\PurchaseItems\Details.cshtml ====
@model ConcertSystemDomain.Model.PurchaseItem

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>PurchaseItem</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Quantity)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Quantity)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Price)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Purchase)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Purchase.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Ticket)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Ticket.Status)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


// ==== Views\PurchaseItems\Edit.cshtml ====
@model ConcertSystemDomain.Model.PurchaseItem

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>PurchaseItem</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="PurchaseId" class="control-label"></label>
                <select asp-for="PurchaseId" class="form-control" asp-items="ViewBag.PurchaseId"></select>
                <span asp-validation-for="PurchaseId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TicketId" class="control-label"></label>
                <select asp-for="TicketId" class="form-control" asp-items="ViewBag.TicketId"></select>
                <span asp-validation-for="TicketId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\PurchaseItems\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.PurchaseItem>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Purchase)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Ticket)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Purchase.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Ticket.Status)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Purchases\Create.cshtml ====
@model ConcertSystemDomain.Model.Purchase

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Purchase</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SpectatorId" class="control-label"></label>
                <select asp-for="SpectatorId" class ="form-control" asp-items="ViewBag.SpectatorId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Purchases\Delete.cshtml ====
@model ConcertSystemDomain.Model.Purchase

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Purchase</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PurchaseDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PurchaseDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Spectator)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Spectator.Email)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>


// ==== Views\Purchases\Details.cshtml ====
@model ConcertSystemDomain.Model.Purchase

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Purchase</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PurchaseDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PurchaseDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Spectator)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Spectator.Email)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


// ==== Views\Purchases\Edit.cshtml ====
@model ConcertSystemDomain.Model.Purchase

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Purchase</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SpectatorId" class="control-label"></label>
                <select asp-for="SpectatorId" class="form-control" asp-items="ViewBag.SpectatorId"></select>
                <span asp-validation-for="SpectatorId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PurchaseDate" class="control-label"></label>
                <input asp-for="PurchaseDate" class="form-control" />
                <span asp-validation-for="PurchaseDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <input asp-for="Status" class="form-control" />
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Purchases\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Purchase>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.PurchaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Spectator)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.PurchaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Spectator.Email)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Reports\Index.cshtml ====
@{
    ViewData["Title"] = "Звіти";
}

<h1>Управління звітами</h1>

<!-- Відображення повідомлень -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">Імпорт даних</div>
            <div class="card-body">
                <h5>З Excel</h5>
                <form asp-action="ImportExcel" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <input type="file" name="file" class="form-control" accept=".xlsx" />
                    </div>
                    <button type="submit" class="btn">Імпортувати</button>
                </form>

                <hr>

                <h5>З Word</h5>
                <form asp-action="ImportDocx" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <input type="file" name="file" class="form-control" accept=".docx" />
                    </div>
                    <button type="submit" class="btn">Імпортувати</button>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">Експорт даних</div>
            <div class="card-body">
                <h5>В Excel</h5>
                <form asp-action="ExportExcel" method="get">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <button type="submit" class="btn">Експортувати</button>
                </form>

                <hr>

                <h5>В Word</h5>
                <form asp-action="ExportDocx" method="get">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <button type="submit" class="btn">Експортувати</button>
                </form>
            </div>
        </div>
    </div>
</div>

// ==== Views\Shared\Error.cshtml ====
@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>


// ==== Views\Shared\_Layout.cshtml ====
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ConcertSystem</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Concerts" asp-action="Index">ConcertSystem</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Головна</a>
                        </li>
                        <!-- Випадаюче меню для подій із фільтрами -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle text-dark" href="#" id="concertsDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Події
                            </a>
                            <div class="dropdown-menu" aria-labelledby="concertsDropdown">
                                <form asp-controller="Concerts" asp-action="Index" method="get" class="p-3">
                                    <div class="form-group">
                                        <label>Артист:</label>
                                        <select name="artistFilter" class="form-control">
                                            <option value="">Всі артисти</option>
                                            @foreach (var artist in (List<string>)ViewData["Artists"] ?? new List<string>())
                                            {
                                                <option value="@artist">@artist</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Жанр:</label>
                                        <select name="genreFilter" class="form-control">
                                            <option value="">Всі жанри</option>
                                            @foreach (var genre in (List<string>)ViewData["Genres"] ?? new List<string>())
                                            {
                                                <option value="@genre">@genre</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Місто проведення:</label>
                                        <select name="locationFilter" class="form-control">
                                            <option value="">Всі міста</option>
                                            @foreach (var location in (List<string>)ViewData["Locations"] ?? new List<string>())
                                            {
                                                <option value="@location">@location</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Дата події:</label>
                                        <input type="date" name="dateFilter" class="form-control" />
                                    </div>
                                    <button type="submit" class="btn btn-primary mt-2">Фільтрувати</button>
                                </form>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" asp-controller="Concerts" asp-action="Index">Всі події</a>
                            </div>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Artists" asp-action="Index">Артисти</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Spectators" asp-action="Index">Глядачі</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="Reports" asp-action="Index">Звіти</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <div class="wrapper">
        <div class="container">
            <main role="main" class="pb-3">
                @RenderBody()
            </main>
        </div>
        <div class="push"></div>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            © 2025 - ConcertSystem - <a asp-area="" asp-controller="Home" asp-action="Privacy">Політика конфіденційності</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

// ==== Views\Shared\_Layout.cshtml.css ====
/* Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
for details on configuring this project to bundle and minify static web assets. */

a.navbar-brand {
  white-space: normal;
  text-align: center;
  word-break: break-all;
}

a {
  color: #0077cc;
}

.btn-primary {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.nav-pills .nav-link.active, .nav-pills .show > .nav-link {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.border-top {
  border-top: 1px solid #e5e5e5;
}
.border-bottom {
  border-bottom: 1px solid #e5e5e5;
}

.box-shadow {
  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);
}

button.accept-policy {
  font-size: 1rem;
  line-height: inherit;
}

.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  white-space: nowrap;
  line-height: 60px;
}


// ==== Views\Shared\_ValidationScriptsPartial.cshtml ====
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>


// ==== Views\Spectators\Create.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Додати глядача";
}

<h1>Додати глядача</h1>

<h4>Глядач</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="FullName" class="control-label"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <small id="phone-error" class="form-text text-danger" style="display: none;">Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).</small>
                <span asp-validation-for="Phone" class="text-danger" style="display: none;"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Отримуємо елементи
        var phoneInput = document.querySelector('input[name="Phone"]');
        var phoneError = document.getElementById('phone-error');

        // Додаємо обробник події для відображення помилки
        phoneInput.addEventListener('input', function () {
            var phoneValue = this.value;
            if (phoneValue && (phoneValue.length !== 13 || !phoneValue.startsWith('+') || !phoneValue.substring(1).match(/^\d+$/))) {
                phoneError.style.display = 'block';
            } else {
                phoneError.style.display = 'none';
            }
        });

        // Перевіряємо при завантаженні сторінки
        var validationMessage = document.querySelector('span[data-valmsg-for="Phone"][data-valmsg-replace="true"]');
        if (validationMessage && validationMessage.textContent) {
            phoneError.style.display = 'block';
            phoneError.textContent = validationMessage.textContent;
            validationMessage.style.display = 'none';
        }
    </script>
}

// ==== Views\Spectators\Delete.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Видалити глядача";
}

<h1>Видалити глядача</h1>

<h3>Ви впевнені, що хочете видалити цього глядача?</h3>
<div>
    <h4>Глядач</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            ПІБ
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FullName)
        </dd>
        <dt class="col-sm-2">
            Телефон
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Phone)
        </dd>
        <dt class="col-sm-2">
            Електронна пошта
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
    </dl>

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Spectators\Details.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Деталі глядача";
}

<h1>Деталі глядача</h1>

<div>
    <h4>Глядач</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            ПІБ
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FullName)
        </dd>
        <dt class="col-sm-2">
            Телефон
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Phone)
        </dd>
        <dt class="col-sm-2">
            Електронна пошта
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
    </dl>
</div>

<h4>Куплені квитки</h4>
<hr />
@if (Model.Purchases.Any())
{
    <p>Кількість куплених квитків: @Model.Purchases.Sum(p => p.PurchaseItems.Sum(pi => pi.Quantity))</p>
    <table class="table">
        <thead>
            <tr>
                <th>Концерт</th>
                <th>Артист</th>
                <th>Дата</th>
                <th>Місце</th>
                <th>Ряд</th>
                <th>Номер місця</th>
                <th>Ціна</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var purchase in Model.Purchases)
            {
                foreach (var item in purchase.PurchaseItems)
                {
                    <tr>
                        <td>@item.Ticket.Concert.Location</td>
                        <td>@item.Ticket.Concert.Artist.FullName</td>
                        <td>@item.Ticket.Concert.ConcertDate.ToString("dd.MM.yyyy HH:mm")</td>
                        <td>@item.Ticket.Concert.Location</td>
                        <td>@item.Ticket.Row</td>
                        <td>@item.Ticket.SeatNumber</td>
                        <td>@item.Price</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <p>Цей глядач ще не придбав жодного квитка.</p>
}

<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Редагувати</a> |
    <a asp-action="Index">Повернутися до списку</a>
</div>

// ==== Views\Spectators\Edit.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Редагувати глядача";
}

<h1>Редагувати глядача</h1>

<h4>Глядач</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="FullName" class="control-label"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <small id="phone-error" class="form-text text-danger" style="display: none;">Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).</small>
                <span asp-validation-for="Phone" class="text-danger" style="display: none;"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Отримуємо елементи
        var phoneInput = document.querySelector('input[name="Phone"]');
        var phoneError = document.getElementById('phone-error');

        // Додаємо обробник події для відображення помилки
        phoneInput.addEventListener('input', function () {
            var phoneValue = this.value;
            if (phoneValue && (phoneValue.length !== 13 || !phoneValue.startsWith('+') || !phoneValue.substring(1).match(/^\d+$/))) {
                phoneError.style.display = 'block';
            } else {
                phoneError.style.display = 'none';
            }
        });

        // Перевіряємо при завантаженні сторінки
        var validationMessage = document.querySelector('span[data-valmsg-for="Phone"][data-valmsg-replace="true"]');
        if (validationMessage && validationMessage.textContent) {
            phoneError.style.display = 'block';
            phoneError.textContent = validationMessage.textContent;
            validationMessage.style.display = 'none';
        }
    </script>
}

// ==== Views\Spectators\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Spectator>

@{
    ViewData["Title"] = "Глядачі";
}

<h1>Глядачі</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Додати нового</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                ПІБ
            </th>
            <th>
                Телефон
            </th>
            <th>
                Електронна пошта
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FullName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Phone)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-secondary">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Tickets\Create.cshtml ====
@model ConcertSystemDomain.Model.Ticket

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Ticket</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ConcertId" class="control-label"></label>
                <select asp-for="ConcertId" class ="form-control" asp-items="ViewBag.ConcertId"></select>
            </div>
            <div class="form-group">
                <label asp-for="Row" class="control-label"></label>
                <input asp-for="Row" class="form-control" />
                <span asp-validation-for="Row" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SeatNumber" class="control-label"></label>
                <input asp-for="SeatNumber" class="form-control" />
                <span asp-validation-for="SeatNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BasePrice" class="control-label"></label>
                <input asp-for="BasePrice" class="form-control" />
                <span asp-validation-for="BasePrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Tickets\Delete.cshtml ====
@model ConcertSystemDomain.Model.Ticket

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Ticket</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Row)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Row)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SeatNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.SeatNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BasePrice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BasePrice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Concert)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Concert.Location)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>


// ==== Views\Tickets\Details.cshtml ====
@model ConcertSystemDomain.Model.Ticket

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Ticket</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Row)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Row)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SeatNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.SeatNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BasePrice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BasePrice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Concert)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Concert.Location)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


// ==== Views\Tickets\Edit.cshtml ====
@model ConcertSystemDomain.Model.Ticket

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Ticket</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ConcertId" class="control-label"></label>
                <select asp-for="ConcertId" class="form-control" asp-items="ViewBag.ConcertId"></select>
                <span asp-validation-for="ConcertId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Row" class="control-label"></label>
                <input asp-for="Row" class="form-control" />
                <span asp-validation-for="Row" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SeatNumber" class="control-label"></label>
                <input asp-for="SeatNumber" class="form-control" />
                <span asp-validation-for="SeatNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BasePrice" class="control-label"></label>
                <input asp-for="BasePrice" class="form-control" />
                <span asp-validation-for="BasePrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <input asp-for="Status" class="form-control" />
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Tickets\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Ticket>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Row)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SeatNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BasePrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Concert)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Row)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SeatNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.BasePrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Concert.Location)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== wwwroot\css\site.css ====
/* ������� ������� */
:root {
    --primary-color: #C3B1E1; /* ���������-���������� */
    --secondary-color: #E6E6FA; /* ���������� */
    --background-color: #FAF9F6; /* ���� ������ ��� */
    --text-color: #4A4A4A; /* �'���� ������ ����� */
    --hover-color: #A89CC8; /* ����� �������� ���������� ���������� ��� ������ */
}

/* �������� ���� */
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
}

body {
    background-color: var(--background-color);
    color: var(--text-color);
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    min-height: 100vh; /* ���������, �� body ����� ��� ������ ���� */
}

.wrapper {
    flex: 1 0 auto; /* ������� ����� ���� ��������� ������ */
}

.push {
    height: 60px; /* ������ ������, ��� ������� �� ������������ */
}

/* ���������� ������ */
.navbar {
    background-color: var(--primary-color) !important;
}

.navbar-brand, .nav-link {
    color: var(--text-color) !important;
}

    .nav-link:hover {
        color: var(--hover-color) !important;
    }

/* ������ */
.btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: var(--text-color);
}

    .btn-primary:hover {
        background-color: var(--hover-color);
        border-color: var(--hover-color);
    }

.btn-secondary {
    background-color: var(--secondary-color);
    border-color: var(--secondary-color);
    color: var(--text-color);
}

    .btn-secondary:hover {
        background-color: var(--hover-color);
        border-color: var(--hover-color);
    }

.btn-info {
    background-color: #C3B1E1; /* ���������-���������� */
    border-color: #C3B1E1;
    color: var(--text-color);
}

    .btn-info:hover {
        background-color: #A89CC8; /* ����� �������� ���������� ���������� */
        border-color: #A89CC8;
    }

.btn-danger {
    background-color: #FFB6C1; /* ���������-������� ��� ��������� */
    border-color: #FFB6C1;
    color: var(--text-color);
}

    .btn-danger:hover {
        background-color: #FFA07A; /* ����� �������� ���������-������� */
        border-color: #FFA07A;
    }

/* ������� */
.table {
    width: 100%;
    margin-bottom: 1rem;
    background-color: white;
    border-collapse: separate;
    border-spacing: 0;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

    .table th,
    .table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    .table th {
        background-color: var(--primary-color);
        color: var(--text-color);
        font-weight: bold;
    }

    .table tbody tr:hover {
        background-color: rgba(195, 177, 225, 0.1); /* ���������-���������� � ��������� */
    }

/* ����� */
.footer {
    flex-shrink: 0; /* ����� �� ���������� */
    background-color: var(--primary-color);
    color: var(--text-color);
    text-align: center;
    padding: 10px 0;
    height: 60px; /* Գ������� ������ ������ */
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
}

/* ���� ��� ����� ���������� */
.filter-panel {
    margin-bottom: 20px;
}

.filter-panel-content {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

/* ���� ��� ������ */
.btn-primary {
    background-color: #B39DDB; /* ���������-���������� */
    border-color: #B39DDB;
    color: white;
}

    .btn-primary:hover {
        background-color: #9575CD; /* ����� �������� ���������� */
        border-color: #9575CD;
    }

.text-danger {
    font-size: 0.9em;
    margin-top: 5px;
}


// ==== wwwroot\js\site.js ====
// Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your JavaScript code.


