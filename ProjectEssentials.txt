# ConcertSystemDomain Project
==================================================
// ==== ConcertSystemDomain.csproj ====
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="DocumentFormat.OpenXml" Version="3.3.0" />
    <PackageReference Include="DocumentFormat.OpenXml.Framework" Version="3.3.0" />
    <PackageReference Include="EPPlus" Version="7.7.0" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="9.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.3" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.3" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="9.0.3" />
  </ItemGroup>

</Project>


// ==== Model\ApplicationUser.cs ====
using Microsoft.AspNetCore.Identity;

namespace ConcertSystemDomain.Model
{
    public class ApplicationUser : IdentityUser
    {
        // Додаткові поля, якщо потрібні (наприклад, ім’я)
        public string FullName { get; set; }
    }
}

// ==== Model\Artist.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ConcertSystemDomain.Model;

public partial class Artist : Entity
{
    [Required(ErrorMessage = "Поле Назва є обов'язковим")]
    [Display(Name = "Назва")]
    public string FullName { get; set; } = null!;
    
    [Required(ErrorMessage = "Поле Соціальні мережі є обов'язковим")]
    public string? SocialMedia { get; set; }

    public virtual ICollection<Concert> Concerts { get; set; } = new List<Concert>();
}


// ==== Model\Concert.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ConcertSystemDomain.Model
{
    public partial class Concert : Entity
    {
        [Required(ErrorMessage = "Поле Артист є обов'язковим")]
        public int ArtistId { get; set; }

        [Required(ErrorMessage = "Поле Дата концерту є обов'язковим")]
        [CustomDateValidation(ErrorMessage = "Концерт має бути запланований щонайменше за місяць від поточної дати")]
        public DateTime ConcertDate { get; set; }

        [Required(ErrorMessage = "Поле Місто проведення є обов'язковим")]
        [Display(Name = "Місто проведення")]
        public string Location { get; set; } = null!;

        [Required(ErrorMessage = "Поле Загальна кількість квитків є обов'язковим")]
        [Range(1, int.MaxValue, ErrorMessage = "Загальна кількість квитків має бути більше 0")]
        public int TotalTickets { get; set; }

        [Required(ErrorMessage = "Поле Доступні квитки є обов'язковим")]
        [CustomTicketsValidation(ErrorMessage = "Доступних квитків не може бути більше, ніж загальна кількість квитків")]
        public int AvailableTickets { get; set; }

        public virtual Artist Artist { get; set; } = null!;
        public virtual ICollection<Ticket> Tickets { get; set; } = new List<Ticket>();
        public virtual ICollection<Genre> Genres { get; set; } = new List<Genre>();
    }

    // Кастомна валідація для дати концерту
    public class CustomDateValidationAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is DateTime concertDate)
            {
                // Поточна дата
                DateTime currentDate = DateTime.Now;
                // Додаємо місяць до поточної дати
                DateTime minAllowedDate = currentDate.AddMonths(1);

                if (concertDate < minAllowedDate)
                {
                    return new ValidationResult(ErrorMessage);
                }
            }
            return ValidationResult.Success;
        }
    }

    // Кастомна валідація для кількості квитків
    public class CustomTicketsValidationAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var concert = (Concert)validationContext.ObjectInstance;
            int availableTickets = (int)value;
            int totalTickets = concert.TotalTickets;

            if (availableTickets > totalTickets)
            {
                return new ValidationResult(ErrorMessage);
            }

            if (availableTickets < 0)
            {
                return new ValidationResult("Доступних квитків не може бути менше 0");
            }

            return ValidationResult.Success;
        }
    }
}

// ==== Model\Entity.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConcertSystemDomain.Model
{
    public abstract class Entity
    {
        public int Id { get; set; }
    }
}


// ==== Model\Genre.cs ====
using System;
using System.Collections.Generic;

namespace ConcertSystemDomain.Model;

public partial class Genre : Entity
{
    public string Name { get; set; } = null!;

    public virtual ICollection<Concert> Concerts { get; set; } = new List<Concert>();
}


// ==== Model\Purchase.cs ====
using System;
using System.Collections.Generic;

namespace ConcertSystemDomain.Model;

public partial class Purchase : Entity
{
    public int SpectatorId { get; set; }

    public DateTime PurchaseDate { get; set; }

    public string Status { get; set; } = null!;

    public virtual ICollection<PurchaseItem> PurchaseItems { get; set; } = new List<PurchaseItem>();

    public virtual Spectator Spectator { get; set; } = null!;
}


// ==== Model\PurchaseItem.cs ====
using System;
using System.Collections.Generic;

namespace ConcertSystemDomain.Model;

public partial class PurchaseItem : Entity
{
    public int PurchaseId { get; set; }

    public int TicketId { get; set; }

    public int Quantity { get; set; }

    public decimal Price { get; set; }

    public virtual Purchase Purchase { get; set; } = null!;

    public virtual Ticket Ticket { get; set; } = null!;
}


// ==== Model\Spectator.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ConcertSystemDomain.Model;

public partial class Spectator : Entity
{
    [Required(ErrorMessage = "Поле ПІБ є обов'язковим")]
    [Display(Name = "ПІБ")]
    public string FullName { get; set; } = null!;

    [Display(Name = "Телефон")]
    public string? Phone { get; set; }

    [Required(ErrorMessage = "Поле Електронна пошта є обов'язковим")]
    [EmailAddress(ErrorMessage = "Невірний формат електронної пошти")]
    [Display(Name = "Електронна пошта")]
    public string Email { get; set; } = null!;

    public virtual ICollection<Purchase> Purchases { get; set; } = new List<Purchase>();
}

// ==== Model\Ticket.cs ====
using System;
using System.Collections.Generic;

namespace ConcertSystemDomain.Model;

public partial class Ticket : Entity
{
    public int ConcertId { get; set; }

    public string? Row { get; set; }

    public int? SeatNumber { get; set; }

    public decimal BasePrice { get; set; }

    public string Status { get; set; } = null!;

    public virtual Concert Concert { get; set; } = null!;

    public virtual ICollection<PurchaseItem> PurchaseItems { get; set; } = new List<PurchaseItem>();
}


# ConcertSystemInfrastructure Project
==================================================
// ==== appsettings.json ====
{
    "ConnectionStrings": {
        "DefaultConnection": "Server=DESKTOP-D2I193F\\SQLEXPRESS;Database=ConcertTicketSystem;Trusted_Connection=True;Encrypt=False;"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning"
        }
    },
    "AllowedHosts": "*"
}

// ==== Program.cs ====
using ConcertSystemInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using ConcertSystemDomain.Model;

var builder = WebApplication.CreateBuilder(args);

// ������ �������� ���� �����
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<ConcertTicketSystemContext>(options =>
    options.UseSqlServer(connectionString));

// ������ Identity � ������� ������������ �������
builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
    .AddEntityFrameworkStores<ConcertTicketSystemContext>()
    .AddDefaultTokenProviders()
    .AddErrorDescriber<CustomIdentityErrorDescriber>(); // ������ ��� ���������� �������

// ������������ ����� �� ������
builder.Services.Configure<IdentityOptions>(options =>
{
    options.Password.RequireDigit = true;
    options.Password.RequiredLength = 6;
    options.Password.RequireNonAlphanumeric = false;
    options.Password.RequireUppercase = true;
    options.Password.RequireLowercase = true;
});

builder.Services.AddAuthentication()
    .AddCookie(options =>
    {
        options.LoginPath = "/Account/Login";
        options.LogoutPath = "/Account/Logout";
        options.AccessDeniedPath = "/Account/AccessDenied";
    });

builder.Services.AddControllersWithViews();

var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

// ������������ ����� � �����
using (var scope = app.Services.CreateScope())
{
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
    await InitializeRolesAndAdminAsync(roleManager, userManager);
}

app.Run();

async Task InitializeRolesAndAdminAsync(RoleManager<IdentityRole> roleManager, UserManager<ApplicationUser> userManager)
{
    string[] roleNames = { "Admin", "Viewer" };
    foreach (var roleName in roleNames)
    {
        if (!await roleManager.RoleExistsAsync(roleName))
        {
            await roleManager.CreateAsync(new IdentityRole(roleName));
        }
    }

    var adminEmail = "admin@concertsystem.com";
    if (await userManager.FindByEmailAsync(adminEmail) == null)
    {
        var adminUser = new ApplicationUser { UserName = adminEmail, Email = adminEmail, FullName = "Admin User" };
        await userManager.CreateAsync(adminUser, "Admin@123");
        await userManager.AddToRoleAsync(adminUser, "Admin");
    }
}

// ==== Controllers\AccountController.cs ====
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using ConcertSystemDomain.Model;
using System.Threading.Tasks;

namespace ConcertSystemInfrastructure.Controllers
{
    public class AccountController : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;

        public AccountController(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
        }

        // GET: /Account/Register
        [HttpGet]
        public IActionResult Register()
        {
            return View();
        }

        // POST: /Account/Register
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Register(string email, string password, string fullName)
        {
            if (ModelState.IsValid)
            {
                var user = new ApplicationUser { UserName = email, Email = email, FullName = fullName };
                var result = await _userManager.CreateAsync(user, password);

                if (result.Succeeded)
                {
                    // За замовчуванням новий користувач — Viewer
                    await _userManager.AddToRoleAsync(user, "Viewer");
                    await _signInManager.SignInAsync(user, isPersistent: false);
                    return RedirectToAction("Index", "Home");
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }
            return View();
        }

        // GET: /Account/Login
        [HttpGet]
        public IActionResult Login()
        {
            return View();
        }

        // POST: /Account/Login
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Login(string email, string password)
        {
            if (ModelState.IsValid)
            {
                var result = await _signInManager.PasswordSignInAsync(email, password, false, false);
                if (result.Succeeded)
                {
                    return RedirectToAction("Index", "Home");
                }
                ModelState.AddModelError(string.Empty, "Невірний логін або пароль.");
            }
            return View();
        }

        // POST: /Account/Logout
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Logout()
        {
            await _signInManager.SignOutAsync();
            return RedirectToAction("Index", "Home");
        }

        // GET: /Account/AccessDenied
        public IActionResult AccessDenied()
        {
            return View();
        }
    }
}

// ==== Controllers\ArtistsController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;

namespace ConcertSystemInfrastructure.Controllers
{
    [Authorize(Roles = "Admin")]
    public class ArtistsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public ArtistsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Artists
        [AllowAnonymous]
        public async Task<IActionResult> Index()
        {
            ViewData["Artists"] = await _context.Artists.Select(a => a.FullName).Distinct().ToListAsync();
            ViewData["Genres"] = await _context.Genres.Select(g => g.Name).Distinct().ToListAsync();
            ViewData["Locations"] = await _context.Concerts.Select(c => c.Location).Distinct().ToListAsync();

            return View(await _context.Artists.ToListAsync());
        }
        // GET: Artists/Details/5
        [AllowAnonymous]
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var artist = await _context.Artists
                .Include(a => a.Concerts)
                .ThenInclude(c => c.Genres)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (artist == null)
            {
                return NotFound();
            }

            return View(artist);
        }

        // GET: Artists/Create
        [Authorize(Roles = "Admin")]
        public IActionResult Create()
        {
            return View();
        }

        // POST: Artists/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Create([Bind("Id,FullName,SocialMedia")] Artist artist)
        {
            if (await _context.Artists.AnyAsync(a => a.FullName == artist.FullName))
            {
                ModelState.AddModelError("FullName", "Артист із такою назвою вже існує.");
            }

            if (await _context.Artists.AnyAsync(a => a.SocialMedia == artist.SocialMedia))
            {
                ModelState.AddModelError("SocialMedia", "Артист із такою соціальною мережею вже існує.");
            }

            if (ModelState.IsValid)
            {
                _context.Add(artist);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(artist);
        }

        // GET: Artists/Edit/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var artist = await _context.Artists.FindAsync(id);
            if (artist == null)
            {
                return NotFound();
            }
            return View(artist);
        }

        // POST: Artists/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int id, [Bind("Id,FullName,SocialMedia")] Artist artist)
        {
            if (id != artist.Id)
            {
                return NotFound();
            }

            if (await _context.Artists.AnyAsync(a => a.FullName == artist.FullName && a.Id != artist.Id))
            {
                ModelState.AddModelError("FullName", "Артист із такою назвою вже існує.");
            }

            if (await _context.Artists.AnyAsync(a => a.SocialMedia == artist.SocialMedia && a.Id != artist.Id))
            {
                ModelState.AddModelError("SocialMedia", "Артист із такою соціальною мережею вже існує.");
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(artist);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ArtistExists(artist.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(artist);
        }

        // GET: Artists/Delete/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var artist = await _context.Artists
                .Include(a => a.Concerts)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (artist == null)
            {
                return NotFound();
            }

            return View(artist);
        }
        // POST: Artists/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                // Завантажуємо артиста з пов'язаними концертами і квитками
                var artist = await _context.Artists
                    .Include(a => a.Concerts)
                        .ThenInclude(c => c.Tickets)
                            .ThenInclude(t => t.PurchaseItems)
                    .Include(a => a.Concerts)
                        .ThenInclude(c => c.Genres)
                    .FirstOrDefaultAsync(a => a.Id == id);

                if (artist == null)
                {
                    await transaction.RollbackAsync();
                    return NotFound();
                }

                // Перевіряємо, чи є продані квитки
                bool hasSoldTickets = artist.Concerts
                    .Any(c => c.Tickets.Any(t => t.Status == "Sold"));

                if (hasSoldTickets)
                {
                    await transaction.RollbackAsync();
                    TempData["ErrorMessage"] = "Неможливо видалити артиста, оскільки на його концерти вже продані квитки.";
                    return RedirectToAction(nameof(Index));
                }

                // Видаляємо пов'язані концерти
                foreach (var concert in artist.Concerts)
                {
                    // Видаляємо PurchaseItems
                    foreach (var ticket in concert.Tickets)
                    {
                        _context.PurchaseItems.RemoveRange(ticket.PurchaseItems);
                    }
                    // Видаляємо квитки
                    _context.Tickets.RemoveRange(concert.Tickets);
                    // Очищаємо жанри
                    concert.Genres.Clear();
                    // Видаляємо концерт
                    _context.Concerts.Remove(concert);
                }

                // Видаляємо артиста
                _context.Artists.Remove(artist);

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                TempData["SuccessMessage"] = "Артиста та його концерти успішно видалено!";
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                TempData["ErrorMessage"] = $"Помилка при видаленні артиста: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }
        private bool ArtistExists(int id)
        {
            return _context.Artists.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\ChartsController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ChartsController : ControllerBase
    {
        private readonly ConcertTicketSystemContext _context;

        public ChartsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // Діаграма 1: Кількість концертів за роками
        private record ConcertsByYearResponseItem(string Year, int Count);

        [HttpGet("concertsByYear")]
        public async Task<JsonResult> GetConcertsByYearAsync(CancellationToken cancellationToken)
        {
            var responseItems = await _context.Concerts
                .GroupBy(concert => concert.ConcertDate.Year)
                .Select(group => new ConcertsByYearResponseItem(group.Key.ToString(), group.Count()))
                .ToListAsync(cancellationToken);
            return new JsonResult(responseItems);
        }

        // Діаграма 2: Кількість проданих квитків за жанрами
        private record TicketsByGenreResponseItem(string Genre, int Count);

        [HttpGet("ticketsByGenre")]
        public async Task<JsonResult> GetTicketsByGenreAsync(CancellationToken cancellationToken)
        {
            var responseItems = await _context.Tickets
                .Where(t => t.Status == "Sold")
                .Include(t => t.Concert)
                .ThenInclude(c => c.Genres)
                .SelectMany(t => t.Concert.Genres)
                .GroupBy(g => g.Name)
                .Select(group => new TicketsByGenreResponseItem(group.Key, group.Count()))
                .ToListAsync(cancellationToken);
            return new JsonResult(responseItems);
        }
    }
}

// ==== Controllers\ConcertsController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;

namespace ConcertSystemInfrastructure.Controllers
{
    
    public class ConcertsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;
        private readonly UserManager<ApplicationUser> _userManager;

        public ConcertsController(ConcertTicketSystemContext context, UserManager<ApplicationUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        // GET: Concerts
        [AllowAnonymous]
        public async Task<IActionResult> Index(string artistFilter, string genreFilter, string locationFilter, DateTime? dateFilter)
        {
            ViewBag.Artists = await _context.Artists.Select(a => a.FullName).Distinct().ToListAsync();
            ViewBag.Genres = await _context.Genres.Select(g => g.Name).Distinct().ToListAsync();
            ViewBag.Locations = await _context.Concerts.Select(c => c.Location).Distinct().ToListAsync();

            var concerts = _context.Concerts
                .Include(c => c.Artist)
                .Include(c => c.Genres)
                .AsQueryable();

            if (!string.IsNullOrEmpty(artistFilter))
            {
                concerts = concerts.Where(c => c.Artist.FullName.Contains(artistFilter));
            }

            if (!string.IsNullOrEmpty(genreFilter))
            {
                concerts = concerts.Where(c => c.Genres.Any(g => g.Name == genreFilter));
            }

            if (!string.IsNullOrEmpty(locationFilter))
            {
                concerts = concerts.Where(c => c.Location.Contains(locationFilter));
            }

            if (dateFilter.HasValue)
            {
                concerts = concerts.Where(c => c.ConcertDate.Date == dateFilter.Value.Date);
            }

            return View(await concerts.ToListAsync());
        }

        // GET: Concerts/Create
        // GET: Concerts/Create
        [Authorize(Roles = "Admin")]
        public IActionResult Create()
        {
            ViewBag.ArtistId = new SelectList(_context.Artists, "Id", "FullName");
            ViewBag.GenreIds = new SelectList(_context.Genres, "Id", "Name");
            return View();
        }

        // POST: Concerts/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Create([Bind("Id,ArtistId,ConcertDate,Location,TotalTickets")] Concert concert, int[] GenreIds)
        {
            // Перевірка дати
            DateTime minAllowedDate = DateTime.Now.AddMonths(1);
            if (concert.ConcertDate < minAllowedDate)
            {
                ModelState.AddModelError("ConcertDate", "Концерт має бути запланований щонайменше за місяць від поточної дати");
            }

            // Автоматично встановлюємо AvailableTickets = TotalTickets
            concert.AvailableTickets = concert.TotalTickets;

            ModelState.Remove("Artist");
            ModelState.Remove("Location");
            ModelState.Remove("AvailableTickets"); // Видаляємо AvailableTickets з валідації, бо його не передаємо з форми

            if (ModelState.IsValid)
            {
                // Додаємо концерт
                _context.Add(concert);
                await _context.SaveChangesAsync();

                // Створюємо квитки
                for (int i = 1; i <= concert.TotalTickets; i++)
                {
                    var ticket = new Ticket
                    {
                        ConcertId = concert.Id,
                        Row = "A",
                        SeatNumber = i,
                        BasePrice = 100,
                        Status = "Available"
                    };
                    _context.Tickets.Add(ticket);
                }
                await _context.SaveChangesAsync();

                // Додаємо жанри
                if (GenreIds != null)
                {
                    concert.Genres = await _context.Genres.Where(g => GenreIds.Contains(g.Id)).ToListAsync();
                    await _context.SaveChangesAsync();
                }

                return RedirectToAction(nameof(Index));
            }

            ViewBag.ArtistId = new SelectList(await _context.Artists.Select(a => new { a.Id, a.FullName }).ToListAsync(), "Id", "FullName");
            ViewBag.GenreIds = new SelectList(await _context.Genres.Select(g => new { g.Id, g.Name }).ToListAsync(), "Id", "Name");
            return View(concert);
        }
        // GET: Concerts/Edit/5
        // GET: Concerts/Edit/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var concert = await _context.Concerts.FindAsync(id);
            if (concert == null)
            {
                return NotFound();
            }

            ViewBag.ArtistId = new SelectList(await _context.Artists.Select(a => new { a.Id, a.FullName }).ToListAsync(), "Id", "FullName", concert.ArtistId);
            ViewBag.GenreIds = new SelectList(await _context.Genres.Select(g => new { g.Id, g.Name }).ToListAsync(), "Id", "Name");
            return View(concert);
        }

        // POST: Concerts/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int id, [Bind("Id,ArtistId,ConcertDate,Location,TotalTickets")] Concert concert, int[] GenreIds)
        {
            if (id != concert.Id)
            {
                return NotFound();
            }

            // Перевірка дати
            DateTime minAllowedDate = DateTime.Now.AddMonths(1);
            if (concert.ConcertDate < minAllowedDate)
            {
                ModelState.AddModelError("ConcertDate", "Концерт має бути запланований щонайменше за місяць від поточної дати");
            }

            ModelState.Remove("Artist");
            ModelState.Remove("Location");
            ModelState.Remove("AvailableTickets"); // Видаляємо AvailableTickets з валідації

            if (ModelState.IsValid)
            {
                try
                {
                    // Отримуємо оригінальний концерт
                    var originalConcert = await _context.Concerts
                        .Include(c => c.Tickets)
                        .FirstOrDefaultAsync(c => c.Id == concert.Id);

                    if (originalConcert == null)
                    {
                        return NotFound();
                    }

                    // Зберігаємо поточне значення AvailableTickets
                    int currentAvailableTickets = originalConcert.AvailableTickets;

                    // Оновлюємо поля концерту, крім AvailableTickets
                    originalConcert.ArtistId = concert.ArtistId;
                    originalConcert.ConcertDate = concert.ConcertDate;
                    originalConcert.Location = concert.Location;
                    originalConcert.TotalTickets = concert.TotalTickets;

                    // Синхронізуємо квитки
                    int currentTicketCount = originalConcert.Tickets.Count;
                    if (concert.TotalTickets > currentTicketCount)
                    {
                        // Додаємо нові квитки
                        for (int i = currentTicketCount + 1; i <= concert.TotalTickets; i++)
                        {
                            var ticket = new Ticket
                            {
                                ConcertId = concert.Id,
                                Row = "A",
                                SeatNumber = i,
                                BasePrice = 100,
                                Status = "Available"
                            };
                            _context.Tickets.Add(ticket);
                            currentAvailableTickets++; // Збільшуємо AvailableTickets
                        }
                    }
                    else if (concert.TotalTickets < currentTicketCount)
                    {
                        // Видаляємо зайві квитки (тільки ті, що не продані)
                        var ticketsToRemove = originalConcert.Tickets
                            .Where(t => t.Status == "Available")
                            .OrderByDescending(t => t.SeatNumber)
                            .Take(currentTicketCount - concert.TotalTickets)
                            .ToList();

                        foreach (var ticket in ticketsToRemove)
                        {
                            _context.Tickets.Remove(ticket);
                            currentAvailableTickets--; // Зменшуємо AvailableTickets
                        }
                    }

                    // Оновлюємо AvailableTickets у концерті
                    originalConcert.AvailableTickets = currentAvailableTickets;

                    await _context.SaveChangesAsync();

                    // Оновлюємо жанри
                    var existingGenres = await _context.Concerts
                        .Include(c => c.Genres)
                        .FirstOrDefaultAsync(c => c.Id == concert.Id);
                    if (existingGenres != null)
                    {
                        existingGenres.Genres.Clear();
                        if (GenreIds != null)
                        {
                            var newGenres = await _context.Genres.Where(g => GenreIds.Contains(g.Id)).ToListAsync();
                            foreach (var genre in newGenres)
                            {
                                existingGenres.Genres.Add(genre);
                            }
                        }
                        await _context.SaveChangesAsync();
                    }
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ConcertExists(concert.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }

            ViewBag.ArtistId = new SelectList(await _context.Artists.Select(a => new { a.Id, a.FullName }).ToListAsync(), "Id", "FullName", concert.ArtistId);
            ViewBag.GenreIds = new SelectList(await _context.Genres.Select(g => new { g.Id, g.Name }).ToListAsync(), "Id", "Name");
            return View(concert);
        }
        [AllowAnonymous]
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var concert = await _context.Concerts
                .Include(c => c.Artist) // Включаємо дані артиста
                .Include(c => c.Genres) // Включаємо жанри концерту
                .Include(c => c.Tickets) // Включаємо квитки (опціонально)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (concert == null)
            {
                return NotFound();
            }

            return View(concert);
        }
        // GET: Concerts/Delete/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var concert = await _context.Concerts
                .Include(c => c.Artist)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (concert == null)
            {
                return NotFound();
            }

            return View(concert);
        }

        // POST: Concerts/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                // Завантажуємо концерт разом із пов'язаними сутностями
                var concert = await _context.Concerts
                    .Include(c => c.Tickets)
                        .ThenInclude(t => t.PurchaseItems)
                    .Include(c => c.Genres)
                    .FirstOrDefaultAsync(c => c.Id == id);

                if (concert == null)
                {
                    await transaction.RollbackAsync();
                    return NotFound();
                }

                // Перевіряємо, чи є продані квитки
                if (concert.Tickets.Any(t => t.Status == "Sold"))
                {
                    await transaction.RollbackAsync();
                    TempData["ErrorMessage"] = "Неможливо видалити концерт, оскільки на нього вже продані квитки.";
                    return RedirectToAction(nameof(Index));
                }

                // Видаляємо пов'язані PurchaseItems
                foreach (var ticket in concert.Tickets)
                {
                    _context.PurchaseItems.RemoveRange(ticket.PurchaseItems);
                }

                // Видаляємо квитки
                _context.Tickets.RemoveRange(concert.Tickets);

                // Очищаємо зв'язок з жанрами
                concert.Genres.Clear();

                // Видаляємо сам концерт
                _context.Concerts.Remove(concert);

                // Зберігаємо зміни
                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                TempData["SuccessMessage"] = "Концерт успішно видалено!";
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                TempData["ErrorMessage"] = $"Помилка при видаленні концерту: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }
        // GET: Concerts/BuyTicket/5
        // GET: Concerts/BuyTicket/5
        [Authorize(Roles = "Viewer")]
        public async Task<IActionResult> BuyTicket(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var concert = await _context.Concerts
                .Include(c => c.Artist)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (concert == null)
            {
                return NotFound();
            }

            if (concert.AvailableTickets <= 0)
            {
                TempData["ErrorMessage"] = "На жаль, квитки на цей концерт закінчилися.";
                return RedirectToAction(nameof(Index));
            }

            // Передаємо концерт у ViewBag для відображення інформації
            ViewBag.Concert = concert;
            // Передаємо список доступних квитків для концерту
            ViewBag.Tickets = await _context.Tickets
                .Where(t => t.ConcertId == concert.Id && t.Status == "Available")
                .ToListAsync();

            // Повертаємо форму для введення даних глядача
            return View(new Spectator());
        }
        // POST: Concerts/BuyTicket/5
        // POST: Concerts/BuyTicket/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Viewer")]
        public async Task<IActionResult> BuyTicket(int id, string phone, int? ticketId)
        {
            // Отримуємо концерт з бази даних разом із квитками
            var concert = await _context.Concerts
                .Include(c => c.Tickets)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (concert == null)
            {
                return NotFound();
            }

            // Перевіряємо, чи є доступні квитки
            if (concert.AvailableTickets <= 0)
            {
                TempData["ErrorMessage"] = "На жаль, квитки на цей концерт закінчилися.";
                return RedirectToAction(nameof(Index));
            }

            // Отримуємо дані автентифікованого користувача
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                TempData["ErrorMessage"] = "Користувач не автентифікований.";
                return RedirectToAction(nameof(Index));
            }

            // Створюємо об'єкт Spectator із даними користувача
            var spectator = new Spectator
            {
                FullName = user.FullName,
                Email = user.Email,
                Phone = phone
            };

            // Починаємо транзакцію для забезпечення цілісності даних
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                // Перевіряємо, чи глядач уже існує за email
                var existingSpectator = await _context.Spectators
                    .FirstOrDefaultAsync(s => s.Email == spectator.Email);
                if (existingSpectator == null)
                {
                    // Перевіряємо валідність номера телефону
                    if (string.IsNullOrEmpty(phone) || phone.Length != 13 || !phone.StartsWith("+") || !phone.Substring(1).All(char.IsDigit))
                    {
                        TempData["ErrorMessage"] = "Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).";
                        ViewBag.Concert = concert;
                        ViewBag.Tickets = await _context.Tickets
                            .Where(t => t.ConcertId == concert.Id && t.Status == "Available")
                            .ToListAsync();
                        return View(spectator);
                    }

                    // Якщо глядача немає, додаємо нового
                    _context.Spectators.Add(spectator);
                    await _context.SaveChangesAsync();
                    existingSpectator = spectator;
                }
                else
                {
                    // Оновлюємо номер телефону, якщо глядач уже існує
                    existingSpectator.Phone = phone;
                    _context.Update(existingSpectator);
                    await _context.SaveChangesAsync();
                }

                // Вибираємо квиток: або за ticketId, або перший доступний
                var ticket = ticketId.HasValue
                    ? await _context.Tickets.FirstOrDefaultAsync(t => t.Id == ticketId.Value && t.Status == "Available")
                    : await _context.Tickets.FirstOrDefaultAsync(t => t.ConcertId == concert.Id && t.Status == "Available");

                if (ticket == null)
                {
                    TempData["ErrorMessage"] = "Немає доступних квитків для цього концерту.";
                    return RedirectToAction(nameof(Index));
                }

                // Створюємо запис про покупку
                var purchase = new Purchase
                {
                    SpectatorId = existingSpectator.Id,
                    PurchaseDate = DateTime.Now,
                    Status = "Completed"
                };
                _context.Purchases.Add(purchase);
                await _context.SaveChangesAsync();

                // Створюємо елемент покупки
                var purchaseItem = new PurchaseItem
                {
                    PurchaseId = purchase.Id,
                    TicketId = ticket.Id,
                    Quantity = 1,
                    Price = ticket.BasePrice
                };
                _context.PurchaseItems.Add(purchaseItem);

                // Оновлюємо статус квитка та кількість доступних квитків
                ticket.Status = "Sold";
                concert.AvailableTickets--;
                _context.Update(ticket);
                _context.Update(concert);

                // Зберігаємо всі зміни в базі даних
                await _context.SaveChangesAsync();

                // Підтверджуємо транзакцію
                await transaction.CommitAsync();

                TempData["SuccessMessage"] = "Квиток успішно куплено!";
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                // У разі помилки відкочуємо транзакцію
                await transaction.RollbackAsync();
                TempData["ErrorMessage"] = $"Помилка при покупці: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }
        // GET: Concerts/MyTickets
        [Authorize(Roles = "Viewer")]
        public async Task<IActionResult> MyTickets()
        {
            // Отримуємо автентифікованого користувача
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return RedirectToAction("Login", "Account");
            }

            // Знаходимо глядача за email користувача
            var spectator = await _context.Spectators
                .FirstOrDefaultAsync(s => s.Email == user.Email);
            if (spectator == null)
            {
                TempData["ErrorMessage"] = "Глядач не знайдений. Спочатку придбайте квиток.";
                return RedirectToAction(nameof(Index));
            }

            // Отримуємо всі покупки глядача з пов'язаними даними
            var purchases = await _context.Purchases
                .Where(p => p.SpectatorId == spectator.Id)
                .Include(p => p.PurchaseItems)
                    .ThenInclude(pi => pi.Ticket)
                        .ThenInclude(t => t.Concert)
                            .ThenInclude(c => c.Artist)
                .ToListAsync();

            return View(purchases);
        }
        private bool ConcertExists(int id)
        {
            return _context.Concerts.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\GenresController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    public class GenresController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public GenresController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Genres
        public async Task<IActionResult> Index()
        {
            return View(await _context.Genres.ToListAsync());
        }

        // GET: Genres/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var genre = await _context.Genres
                .FirstOrDefaultAsync(m => m.Id == id);
            if (genre == null)
            {
                return NotFound();
            }

            return View(genre);
        }

        // GET: Genres/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Genres/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Name,Id")] Genre genre)
        {
            if (ModelState.IsValid)
            {
                _context.Add(genre);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(genre);
        }

        // GET: Genres/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var genre = await _context.Genres.FindAsync(id);
            if (genre == null)
            {
                return NotFound();
            }
            return View(genre);
        }

        // POST: Genres/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Name,Id")] Genre genre)
        {
            if (id != genre.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(genre);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!GenreExists(genre.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(genre);
        }

        // GET: Genres/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var genre = await _context.Genres
                .FirstOrDefaultAsync(m => m.Id == id);
            if (genre == null)
            {
                return NotFound();
            }

            return View(genre);
        }

        // POST: Genres/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var genre = await _context.Genres.FindAsync(id);
            if (genre != null)
            {
                _context.Genres.Remove(genre);
                await _context.SaveChangesAsync();
            }

            return RedirectToAction(nameof(Index));
        }

        private bool GenreExists(int id)
        {
            return _context.Genres.Any(e => e.Id == id);
        }
    }
}

// ==== Controllers\HomeController.cs ====
// ==== Controllers\HomeController.cs ====
using ConcertSystemInfrastructure.Models;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;

    public HomeController(ILogger<HomeController> logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        return View();
    }

    public IActionResult Privacy()
    {
        return View();
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}

// ==== Controllers\PurchaseItemsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    public class PurchaseItemsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public PurchaseItemsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: PurchaseItems
        public async Task<IActionResult> Index()
        {
            var concertTicketSystemContext = _context.PurchaseItems.Include(p => p.Purchase).Include(p => p.Ticket);
            return View(await concertTicketSystemContext.ToListAsync());
        }

        // GET: PurchaseItems/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchaseItem = await _context.PurchaseItems
                .Include(p => p.Purchase)
                .Include(p => p.Ticket)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (purchaseItem == null)
            {
                return NotFound();
            }

            return View(purchaseItem);
        }

        // GET: PurchaseItems/Create
        public IActionResult Create()
        {
            ViewData["PurchaseId"] = new SelectList(_context.Purchases, "Id", "Status");
            ViewData["TicketId"] = new SelectList(_context.Tickets, "Id", "Status");
            return View();
        }

        // POST: PurchaseItems/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("PurchaseId,TicketId,Quantity,Price,Id")] PurchaseItem purchaseItem)
        {
            if (ModelState.IsValid)
            {
                _context.Add(purchaseItem);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["PurchaseId"] = new SelectList(_context.Purchases, "Id", "Status", purchaseItem.PurchaseId);
            ViewData["TicketId"] = new SelectList(_context.Tickets, "Id", "Status", purchaseItem.TicketId);
            return View(purchaseItem);
        }

        // GET: PurchaseItems/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchaseItem = await _context.PurchaseItems.FindAsync(id);
            if (purchaseItem == null)
            {
                return NotFound();
            }
            ViewData["PurchaseId"] = new SelectList(_context.Purchases, "Id", "Status", purchaseItem.PurchaseId);
            ViewData["TicketId"] = new SelectList(_context.Tickets, "Id", "Status", purchaseItem.TicketId);
            return View(purchaseItem);
        }

        // POST: PurchaseItems/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("PurchaseId,TicketId,Quantity,Price,Id")] PurchaseItem purchaseItem)
        {
            if (id != purchaseItem.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(purchaseItem);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!PurchaseItemExists(purchaseItem.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["PurchaseId"] = new SelectList(_context.Purchases, "Id", "Status", purchaseItem.PurchaseId);
            ViewData["TicketId"] = new SelectList(_context.Tickets, "Id", "Status", purchaseItem.TicketId);
            return View(purchaseItem);
        }

        // GET: PurchaseItems/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchaseItem = await _context.PurchaseItems
                .Include(p => p.Purchase)
                .Include(p => p.Ticket)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (purchaseItem == null)
            {
                return NotFound();
            }

            return View(purchaseItem);
        }

        // POST: PurchaseItems/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var purchaseItem = await _context.PurchaseItems.FindAsync(id);
            if (purchaseItem != null)
            {
                _context.PurchaseItems.Remove(purchaseItem);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool PurchaseItemExists(int id)
        {
            return _context.PurchaseItems.Any(e => e.Id == id);
        }
    }
}


// ==== Controllers\PurchasesController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    public class PurchasesController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public PurchasesController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Purchases
        public async Task<IActionResult> Index()
        {
            var concertTicketSystemContext = _context.Purchases.Include(p => p.Spectator);
            return View(await concertTicketSystemContext.ToListAsync());
        }

        // GET: Purchases/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchase = await _context.Purchases
                .Include(p => p.Spectator)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (purchase == null)
            {
                return NotFound();
            }

            return View(purchase);
        }

        // GET: Purchases/Create
        public IActionResult Create()
        {
            ViewData["SpectatorId"] = new SelectList(_context.Spectators, "Id", "Email");
            return View();
        }

        // POST: Purchases/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("SpectatorId,PurchaseDate,Status,Id")] Purchase purchase)
        {
            if (ModelState.IsValid)
            {
                _context.Add(purchase);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["SpectatorId"] = new SelectList(_context.Spectators, "Id", "Email", purchase.SpectatorId);
            return View(purchase);
        }

        // GET: Purchases/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchase = await _context.Purchases.FindAsync(id);
            if (purchase == null)
            {
                return NotFound();
            }
            ViewData["SpectatorId"] = new SelectList(_context.Spectators, "Id", "Email", purchase.SpectatorId);
            return View(purchase);
        }

        // POST: Purchases/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("SpectatorId,PurchaseDate,Status,Id")] Purchase purchase)
        {
            if (id != purchase.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(purchase);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!PurchaseExists(purchase.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["SpectatorId"] = new SelectList(_context.Spectators, "Id", "Email", purchase.SpectatorId);
            return View(purchase);
        }

        // GET: Purchases/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var purchase = await _context.Purchases
                .Include(p => p.Spectator)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (purchase == null)
            {
                return NotFound();
            }

            return View(purchase);
        }

        // POST: Purchases/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var purchase = await _context.Purchases.FindAsync(id);
            if (purchase != null)
            {
                _context.Purchases.Remove(purchase);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool PurchaseExists(int id)
        {
            return _context.Purchases.Any(e => e.Id == id);
        }
    }
}


// ==== Controllers\ReportsController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using OfficeOpenXml;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using System;
using DocumentFormat.OpenXml;

namespace ConcertSystemInfrastructure.Controllers
{
    public class ReportsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public ReportsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Reports/Index
        public async Task<IActionResult> Index()
        {
            // Передаємо списки для фільтрів у ViewBag
            ViewBag.Artists = await _context.Artists.Select(a => a.FullName).Distinct().ToListAsync();
            ViewBag.Locations = await _context.Concerts.Select(c => c.Location).Distinct().ToListAsync();
            return View();
        }

        // POST: Reports/ExportExcelWithFilter - Експорт в Excel з урахуванням фільтрів
        [HttpPost]
        public async Task<IActionResult> ExportExcelWithFilter(string tableName, string artistFilter, string locationFilter)
        {
            if (string.IsNullOrEmpty(tableName))
            {
                TempData["ErrorMessage"] = "Будь ласка, виберіть таблицю для експорту.";
                return RedirectToAction(nameof(Index));
            }

            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using var package = new ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add(tableName);

            if (tableName == "Concerts")
            {
                var concerts = _context.Concerts
                    .Include(c => c.Artist)
                    .AsQueryable();

                if (!string.IsNullOrEmpty(artistFilter))
                    concerts = concerts.Where(c => c.Artist.FullName == artistFilter);

                if (!string.IsNullOrEmpty(locationFilter))
                    concerts = concerts.Where(c => c.Location == locationFilter);

                var concertList = await concerts.ToListAsync();

                // Заголовки
                worksheet.Cells[1, 1].Value = "ID";
                worksheet.Cells[1, 2].Value = "Артист";
                worksheet.Cells[1, 3].Value = "Дата концерту";
                worksheet.Cells[1, 4].Value = "Місто";
                worksheet.Cells[1, 5].Value = "Загальна кількість квитків";
                worksheet.Cells[1, 6].Value = "Доступні квитки";

                // Дані
                for (int i = 0; i < concertList.Count; i++)
                {
                    worksheet.Cells[i + 2, 1].Value = concertList[i].Id;
                    worksheet.Cells[i + 2, 2].Value = concertList[i].Artist.FullName;
                    worksheet.Cells[i + 2, 3].Value = concertList[i].ConcertDate.ToString("dd.MM.yyyy");
                    worksheet.Cells[i + 2, 4].Value = concertList[i].Location;
                    worksheet.Cells[i + 2, 5].Value = concertList[i].TotalTickets;
                    worksheet.Cells[i + 2, 6].Value = concertList[i].AvailableTickets;
                }
            }
            // Додай аналогічну логіку для інших таблиць, якщо потрібно

            var stream = new MemoryStream(package.GetAsByteArray());
            return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", $"{tableName}_export.xlsx");
        }

        // POST: Reports/ExportDocxWithFilter - Експорт у Word з урахуванням фільтрів
        [HttpPost]
        public async Task<IActionResult> ExportDocxWithFilter(string tableName, string artistFilter, string locationFilter)
        {
            if (string.IsNullOrEmpty(tableName))
            {
                TempData["ErrorMessage"] = "Будь ласка, виберіть таблицю для експорту.";
                return RedirectToAction(nameof(Index));
            }

            using var stream = new MemoryStream();
            using (var wordDoc = WordprocessingDocument.Create(stream, DocumentFormat.OpenXml.WordprocessingDocumentType.Document))
            {
                var mainPart = wordDoc.AddMainDocumentPart();
                mainPart.Document = new Document();
                var body = mainPart.Document.AppendChild(new Body());

                if (tableName == "Concerts")
                {
                    var concerts = _context.Concerts
                        .Include(c => c.Artist)
                        .AsQueryable();

                    if (!string.IsNullOrEmpty(artistFilter))
                        concerts = concerts.Where(c => c.Artist.FullName == artistFilter);

                    if (!string.IsNullOrEmpty(locationFilter))
                        concerts = concerts.Where(c => c.Location == locationFilter);

                    var concertList = await concerts.ToListAsync();

                    var table = new Table();
                    var props = new TableProperties(
                        new TableBorders(
                            new TopBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                            new BottomBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                            new LeftBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                            new RightBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                            new InsideHorizontalBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                            new InsideVerticalBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 }
                        )
                    );
                    table.AppendChild(props);

                    // Заголовки
                    var headerRow = new TableRow();
                    headerRow.Append(
                        new TableCell(new Paragraph(new Run(new Text("ID")))),
                        new TableCell(new Paragraph(new Run(new Text("Артист")))),
                        new TableCell(new Paragraph(new Run(new Text("Дата концерту")))),
                        new TableCell(new Paragraph(new Run(new Text("Місто")))),
                        new TableCell(new Paragraph(new Run(new Text("Загальна кількість квитків")))),
                        new TableCell(new Paragraph(new Run(new Text("Доступні квитки"))))
                    );
                    table.AppendChild(headerRow);

                    // Дані
                    foreach (var concert in concertList)
                    {
                        var row = new TableRow();
                        row.Append(
                            new TableCell(new Paragraph(new Run(new Text(concert.Id.ToString())))),
                            new TableCell(new Paragraph(new Run(new Text(concert.Artist.FullName)))),
                            new TableCell(new Paragraph(new Run(new Text(concert.ConcertDate.ToString("dd.MM.yyyy"))))),
                            new TableCell(new Paragraph(new Run(new Text(concert.Location)))),
                            new TableCell(new Paragraph(new Run(new Text(concert.TotalTickets.ToString())))),
                            new TableCell(new Paragraph(new Run(new Text(concert.AvailableTickets.ToString()))))
                        );
                        table.AppendChild(row);
                    }

                    body.Append(table);
                }
            }

            stream.Position = 0;
            return File(stream, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", $"{tableName}_export.docx");
        }

        // POST: Reports/ImportExcel
        [HttpPost]
        public async Task<IActionResult> ImportExcel(string tableName, IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                TempData["ErrorMessage"] = "Будь ласка, виберіть файл для імпорту.";
                return RedirectToAction(nameof(Index));
            }

            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            var errors = new List<string>(); // Змінюємо на List<string>

            using var stream = new MemoryStream();
            await file.CopyToAsync(stream);
            using var package = new ExcelPackage(stream);
            var worksheet = package.Workbook.Worksheets.FirstOrDefault();

            if (worksheet == null)
            {
                TempData["ErrorMessage"] = "Файл Excel не містить жодного аркуша.";
                return RedirectToAction(nameof(Index));
            }

            if (tableName == "Concerts")
            {
                for (int row = 2; row <= worksheet.Dimension?.Rows; row++)
                {
                    try
                    {
                        if (worksheet.Dimension == null)
                        {
                            errors.Add($"Рядок {row}: Файл Excel порожній або пошкоджений.");
                            continue;
                        }

                        var artistName = worksheet.Cells[row, 2].Text;
                        var concertDateStr = worksheet.Cells[row, 3].Text;
                        var location = worksheet.Cells[row, 4].Text;
                        var totalTicketsStr = worksheet.Cells[row, 5].Text;

                        // Валідація
                        var artist = await _context.Artists.FirstOrDefaultAsync(a => a.FullName == artistName);
                        if (artist == null)
                        {
                            errors.Add($"Рядок {row}: Артист '{artistName}' не знайдений у базі даних.");
                            continue;
                        }

                        if (!DateTime.TryParse(concertDateStr, out var concertDate) || concertDate < DateTime.Now.AddMonths(1))
                        {
                            errors.Add($"Рядок {row}: Невірний формат дати або концерт запланований раніше, ніж за місяць від поточної дати.");
                            continue;
                        }

                        if (string.IsNullOrEmpty(location))
                        {
                            errors.Add($"Рядок {row}: Місто проведення не вказано.");
                            continue;
                        }

                        if (!int.TryParse(totalTicketsStr, out var totalTickets) || totalTickets <= 0)
                        {
                            errors.Add($"Рядок {row}: Загальна кількість квитків має бути числом більше 0.");
                            continue;
                        }

                        var concert = new Concert
                        {
                            ArtistId = artist.Id,
                            ConcertDate = concertDate,
                            Location = location,
                            TotalTickets = totalTickets,
                            AvailableTickets = totalTickets
                        };
                        _context.Concerts.Add(concert);
                    }
                    catch (Exception ex)
                    {
                        errors.Add($"Рядок {row}: Помилка обробки рядка: {ex.Message}");
                    }
                }

                if (errors.Count == 0)
                {
                    await _context.SaveChangesAsync();
                    TempData["SuccessMessage"] = "Дані успішно імпортовано!";
                }
                else
                {
                    TempData["ErrorMessage"] = "Під час імпорту виникли помилки.";
                    TempData["ImportErrors"] = Newtonsoft.Json.JsonConvert.SerializeObject(errors);
                }
            }

            return RedirectToAction(nameof(Index));
        }

        // POST: Reports/ImportDocx
        [HttpPost]
        public async Task<IActionResult> ImportDocx(string tableName, IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                TempData["ErrorMessage"] = "Будь ласка, виберіть файл для імпорту.";
                return RedirectToAction(nameof(Index));
            }

            var errors = new List<string>(); // Змінюємо на List<string>

            using var stream = new MemoryStream();
            await file.CopyToAsync(stream);
            using var wordDoc = WordprocessingDocument.Open(stream, false);
            var body = wordDoc.MainDocumentPart?.Document?.Body;
            if (body == null)
            {
                TempData["ErrorMessage"] = "Документ Word порожній або пошкоджений.";
                return RedirectToAction(nameof(Index));
            }

            var table = body.Elements<Table>().FirstOrDefault();
            if (table == null)
            {
                TempData["ErrorMessage"] = "У документі відсутня таблиця для імпорту.";
                return RedirectToAction(nameof(Index));
            }

            if (tableName == "Concerts")
            {
                int rowIndex = 1; // Пропускаємо заголовок
                foreach (var row in table.Elements<TableRow>().Skip(1))
                {
                    rowIndex++;
                    try
                    {
                        var cells = row.Elements<TableCell>().ToList();
                        if (cells.Count < 5)
                        {
                            errors.Add($"Рядок {rowIndex}: Недостатньо стовпців у рядку.");
                            continue;
                        }

                        var artistName = cells[1].InnerText;
                        var concertDateStr = cells[2].InnerText;
                        var location = cells[3].InnerText;
                        var totalTicketsStr = cells[4].InnerText;

                        // Валідація
                        var artist = await _context.Artists.FirstOrDefaultAsync(a => a.FullName == artistName);
                        if (artist == null)
                        {
                            errors.Add($"Рядок {rowIndex}: Артист '{artistName}' не знайдений у базі даних.");
                            continue;
                        }

                        if (!DateTime.TryParse(concertDateStr, out var concertDate) || concertDate < DateTime.Now.AddMonths(1))
                        {
                            errors.Add($"Рядок {rowIndex}: Невірний формат дати або концерт запланований раніше, ніж за місяць від поточної дати.");
                            continue;
                        }

                        if (string.IsNullOrEmpty(location))
                        {
                            errors.Add($"Рядок {rowIndex}: Місто проведення не вказано.");
                            continue;
                        }

                        if (!int.TryParse(totalTicketsStr, out var totalTickets) || totalTickets <= 0)
                        {
                            errors.Add($"Рядок {rowIndex}: Загальна кількість квитків має бути числом більше 0.");
                            continue;
                        }

                        var concert = new Concert
                        {
                            ArtistId = artist.Id,
                            ConcertDate = concertDate,
                            Location = location,
                            TotalTickets = totalTickets,
                            AvailableTickets = totalTickets
                        };
                        _context.Concerts.Add(concert);
                    }
                    catch (Exception ex)
                    {
                        errors.Add($"Рядок {rowIndex}: Помилка обробки рядка: {ex.Message}");
                    }
                }

                if (errors.Count == 0)
                {
                    await _context.SaveChangesAsync();
                    TempData["SuccessMessage"] = "Дані успішно імпортовано!";
                }
                else
                {
                    TempData["ErrorMessage"] = "Під час імпорту виникли помилки.";
                    TempData["ImportErrors"] = Newtonsoft.Json.JsonConvert.SerializeObject(errors);
                }
            }

            return RedirectToAction(nameof(Index));
        }
    }
}

// ==== Controllers\SpectatorsController.cs ====
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using Microsoft.AspNetCore.Authorization;

namespace ConcertSystemInfrastructure.Controllers
{
    [Authorize(Roles = "Admin")]
    public class SpectatorsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public SpectatorsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> Index()
        {
            return View(await _context.Spectators.ToListAsync());
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("FullName,Phone,Email")] Spectator spectator)
        {
            // Перевірка унікальності ПІБ
            if (await _context.Spectators.AnyAsync(s => s.FullName == spectator.FullName))
            {
                ModelState.AddModelError("FullName", "Глядач із таким ПІБ уже існує.");
            }

            // Перевірка унікальності телефону
            if (!string.IsNullOrEmpty(spectator.Phone) && await _context.Spectators.AnyAsync(s => s.Phone == spectator.Phone))
            {
                ModelState.AddModelError("Phone", "Глядач із таким номером телефону уже існує.");
            }

            // Перевірка унікальності email
            if (await _context.Spectators.AnyAsync(s => s.Email == spectator.Email))
            {
                ModelState.AddModelError("Email", "Глядач із такою електронною поштою уже існує.");
            }

            // Кастомна валідація номера телефону
            if (!string.IsNullOrEmpty(spectator.Phone) && (spectator.Phone.Length != 13 || !spectator.Phone.StartsWith("+") || !spectator.Phone.Substring(1).All(char.IsDigit)))
            {
                ModelState.AddModelError("Phone", "Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).");
            }

            if (ModelState.IsValid)
            {
                _context.Add(spectator);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(spectator);
        }

        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();

            var spectator = await _context.Spectators.FindAsync(id);
            if (spectator == null) return NotFound();
            return View(spectator);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,FullName,Phone,Email")] Spectator spectator)
        {
            if (id != spectator.Id) return NotFound();

            // Перевірка унікальності ПІБ (крім поточного запису)
            if (await _context.Spectators.AnyAsync(s => s.FullName == spectator.FullName && s.Id != spectator.Id))
            {
                ModelState.AddModelError("FullName", "Глядач із таким ПІБ уже існує.");
            }

            // Перевірка унікальності телефону (крім поточного запису)
            if (!string.IsNullOrEmpty(spectator.Phone) && await _context.Spectators.AnyAsync(s => s.Phone == spectator.Phone && s.Id != spectator.Id))
            {
                ModelState.AddModelError("Phone", "Глядач із таким номером телефону уже існує.");
            }

            // Перевірка унікальності email (крім поточного запису)
            if (await _context.Spectators.AnyAsync(s => s.Email == spectator.Email && s.Id != spectator.Id))
            {
                ModelState.AddModelError("Email", "Глядач із такою електронною поштою уже існує.");
            }

            // Кастомна валідація номера телефону
            if (!string.IsNullOrEmpty(spectator.Phone) && (spectator.Phone.Length != 13 || !spectator.Phone.StartsWith("+") || !spectator.Phone.Substring(1).All(char.IsDigit)))
            {
                ModelState.AddModelError("Phone", "Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).");
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(spectator);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!SpectatorExists(spectator.Id)) return NotFound();
                    throw;
                }
                return RedirectToAction(nameof(Index));
            }
            return View(spectator);
        }

        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();

            var spectator = await _context.Spectators.FirstOrDefaultAsync(m => m.Id == id);
            if (spectator == null) return NotFound();

            return View(spectator);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var spectator = await _context.Spectators.FindAsync(id);
            if (spectator != null)
            {
                _context.Spectators.Remove(spectator);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }

        private bool SpectatorExists(int id)
        {
            return _context.Spectators.Any(e => e.Id == id);
        }
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var spectator = await _context.Spectators
                .Include(s => s.Purchases)
                .ThenInclude(p => p.PurchaseItems)
                .ThenInclude(pi => pi.Ticket)
                .ThenInclude(t => t.Concert)
                .ThenInclude(c => c.Artist)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (spectator == null)
            {
                return NotFound();
            }

            return View(spectator);
        }
    }
}

// ==== Controllers\TicketsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ConcertSystemDomain.Model;
using ConcertSystemInfrastructure;

namespace ConcertSystemInfrastructure.Controllers
{
    public class TicketsController : Controller
    {
        private readonly ConcertTicketSystemContext _context;

        public TicketsController(ConcertTicketSystemContext context)
        {
            _context = context;
        }

        // GET: Tickets
        public async Task<IActionResult> Index()
        {
            var concertTicketSystemContext = _context.Tickets.Include(t => t.Concert);
            return View(await concertTicketSystemContext.ToListAsync());
        }

        // GET: Tickets/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ticket = await _context.Tickets
                .Include(t => t.Concert)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (ticket == null)
            {
                return NotFound();
            }

            return View(ticket);
        }

        // GET: Tickets/Create
        public IActionResult Create()
        {
            ViewData["ConcertId"] = new SelectList(_context.Concerts, "Id", "Location");
            return View();
        }

        // POST: Tickets/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("ConcertId,Row,SeatNumber,BasePrice,Status,Id")] Ticket ticket)
        {
            if (ModelState.IsValid)
            {
                _context.Add(ticket);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["ConcertId"] = new SelectList(_context.Concerts, "Id", "Location", ticket.ConcertId);
            return View(ticket);
        }

        // GET: Tickets/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ticket = await _context.Tickets.FindAsync(id);
            if (ticket == null)
            {
                return NotFound();
            }
            ViewData["ConcertId"] = new SelectList(_context.Concerts, "Id", "Location", ticket.ConcertId);
            return View(ticket);
        }

        // POST: Tickets/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("ConcertId,Row,SeatNumber,BasePrice,Status,Id")] Ticket ticket)
        {
            if (id != ticket.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(ticket);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!TicketExists(ticket.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["ConcertId"] = new SelectList(_context.Concerts, "Id", "Location", ticket.ConcertId);
            return View(ticket);
        }

        // GET: Tickets/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ticket = await _context.Tickets
                .Include(t => t.Concert)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (ticket == null)
            {
                return NotFound();
            }

            return View(ticket);
        }

        // POST: Tickets/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var ticket = await _context.Tickets.FindAsync(id);
            if (ticket != null)
            {
                _context.Tickets.Remove(ticket);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool TicketExists(int id)
        {
            return _context.Tickets.Any(e => e.Id == id);
        }
    }
}


// ==== Models\ErrorViewModel.cs ====
namespace ConcertSystemInfrastructure.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}


// ==== Views\_ViewImports.cshtml ====
@using ConcertSystemInfrastructure
@using ConcertSystemInfrastructure.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


// ==== Views\_ViewStart.cshtml ====
@{
    Layout = "_Layout";
}


// ==== Views\Account\AccessDenied.cshtml ====
@{
    ViewData["Title"] = "Доступ заборонено";
}

<h1>Доступ заборонено</h1>
<p>У вас немає прав для доступу до цієї сторінки.</p>
<a asp-controller="Home" asp-action="Index">Повернутися на головну</a>

// ==== Views\Account\Login.cshtml ====
@model dynamic
@{
    ViewData["Title"] = "Вхід";
}

<h1>Вхід</h1>
<form method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label>Email</label>
        <input name="email" class="form-control" />
    </div>
    <div class="form-group">
        <label>Пароль</label>
        <input name="password" type="password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Увійти</button>
</form>

// ==== Views\Account\Register.cshtml ====
@model dynamic
@{
    ViewData["Title"] = "Реєстрація";
}

<h1>Реєстрація</h1>
<form method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label>Email</label>
        <input name="email" class="form-control" />
    </div>
    <div class="form-group">
        <label>Пароль</label>
        <input name="password" type="password" class="form-control" />
    </div>
    <div class="form-group">
        <label>ПІБ</label>
        <input name="fullName" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Зареєструватися</button>
</form>

// ==== Views\Artists\Create.cshtml ====
@model ConcertSystemDomain.Model.Artist

@{
    ViewData["Title"] = "Додати артиста";
}

<h1>Додати артиста</h1>

<h4>Артист</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <!-- Видаляємо asp-validation-summary -->
            <div class="form-group">
                <label asp-for="FullName" class="control-label"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SocialMedia" class="control-label"></label>
                <input asp-for="SocialMedia" class="form-control" />
                <span asp-validation-for="SocialMedia" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Artists\Delete.cshtml ====
@model ConcertSystemDomain.Model.Artist

@{
    ViewData["Title"] = "Видалити артиста";
}

<h1>Видалити артиста</h1>

<h3>Ви впевнені, що хочете видалити цього артиста?</h3>
<div>
    <h4>Артист</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FullName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FullName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.SocialMedia)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.SocialMedia)
        </dd>
    </dl>

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Artists\Details.cshtml ====
@model ConcertSystemDomain.Model.Artist

@{
    ViewData["Title"] = "Всі концерти артиста";
}

<h1>Всі концерти артиста: @Html.DisplayFor(model => model.FullName)</h1>

<div>
    <hr />
    @if (Model.Concerts.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Дата концерту</th>
                    <th>Місто проведення</th>
                    <th>Загальна кількість квитків</th>
                    <th>Доступні квитки</th>
                    <th>Жанри</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var concert in Model.Concerts)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => concert.ConcertDate)</td>
                        <td>@Html.DisplayFor(modelItem => concert.Location)</td>
                        <td>@Html.DisplayFor(modelItem => concert.TotalTickets)</td>
                        <td>@Html.DisplayFor(modelItem => concert.AvailableTickets)</td>
                        <td>
                            @foreach (var genre in concert.Genres)
                            {
                                <span>@genre.Name</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Цей артист поки що не має концертів.</p>
    }
</div>

<div>
    <a asp-action="Index">Повернутися до списку артистів</a>
</div>

// ==== Views\Artists\Edit.cshtml ====
@model ConcertSystemDomain.Model.Artist

@{
    ViewData["Title"] = "Редагувати артиста";
}

<h1>Редагувати артиста</h1>

<h4>Артист</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <!-- Видаляємо asp-validation-summary -->
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="FullName" class="control-label"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SocialMedia" class="control-label"></label>
                <input asp-for="SocialMedia" class="form-control" />
                <span asp-validation-for="SocialMedia" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Artists\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Artist>

@{
    ViewData["Title"] = "Артисти";
}

<h1>Артисти</h1>
@if (User.IsInRole("Admin"))
{
	<p>
		<a asp-action="Create" class="btn btn-primary">Додати артиста</a>
	</p>
}

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.FullName)</th> <!-- Автоматично відобразиться "Назва" -->
            <th>@Html.DisplayNameFor(model => model.SocialMedia)</th>
            <th>Дії</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.FullName)</td>
                <td>@Html.DisplayFor(modelItem => item.SocialMedia)</td>
                <td>
                    @if (User.IsInRole("Admin"))
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-secondary">Редагувати</a>
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Видалити</a>
                    }
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">Всі концерти артиста</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Concerts\BuyTicket.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Купити квиток";
    var concert = ViewBag.Concert as ConcertSystemDomain.Model.Concert;
    var tickets = ViewBag.Tickets as List<ConcertSystemDomain.Model.Ticket>;
}

<h1>Купити квиток</h1>

<h4>Концерт: @concert.Artist.FullName - @concert.Location (@concert.ConcertDate.ToString("dd.MM.yyyy HH:mm"))</h4>
<hr />

<!-- Повідомлення -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<div class="row">
    <div class="col-md-4">
        <form asp-action="BuyTicket" method="post">
            <input type="hidden" name="id" value="@concert.Id" />

            <!-- Вибір квитка -->
            <div class="form-group">
                <label for="ticketId">Виберіть квиток:</label>
                <select name="ticketId" class="form-control" required>
                    <option value="">-- Виберіть квиток --</option>
                    @foreach (var ticket in tickets)
                    {
                        <option value="@ticket.Id">Ряд: @ticket.Row, Місце: @ticket.SeatNumber, Ціна: @ticket.BasePrice</option>
                    }
                </select>
            </div>

            <!-- Поле для номера телефону -->
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <small id="phone-error" class="form-text text-danger" style="display: none;">Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).</small>
                <span asp-validation-for="Phone" class="text-danger" style="display: none;"></span>
            </div>

            <!-- Кнопка "Оплатити через Apple Pay" -->
            <div class="form-group">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-apple"></i> Оплатити через Apple Pay
                </button>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку концертів</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Отримуємо елементи
        var phoneInput = document.querySelector('input[name="Phone"]');
        var phoneError = document.getElementById('phone-error');

        // Додаємо обробник події для відображення помилки
        phoneInput.addEventListener('input', function () {
            var phoneValue = this.value;
            if (phoneValue && (phoneValue.length !== 13 || !phoneValue.startsWith('+') || !phoneValue.substring(1).match(/^\d+$/))) {
                phoneError.style.display = 'block';
            } else {
                phoneError.style.display = 'none';
            }
        });

        // Перевіряємо при завантаженні сторінки
        var validationMessage = document.querySelector('span[data-valmsg-for="Phone"][data-valmsg-replace="true"]');
        if (validationMessage && validationMessage.textContent) {
            phoneError.style.display = 'block';
            phoneError.textContent = validationMessage.textContent;
            validationMessage.style.display = 'none';
        }
    </script>
}

// ==== Views\Concerts\Create.cshtml ====
@model ConcertSystemDomain.Model.Concert

@{
    ViewData["Title"] = "Додати концерт";
}

<h1>Додати концерт</h1>

<h4>Концерт</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ArtistId" class="control-label"></label>
                <select asp-for="ArtistId" class="form-control" asp-items="ViewBag.ArtistId"></select>
                <span asp-validation-for="ArtistId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ConcertDate" class="control-label"></label>
                <input asp-for="ConcertDate" class="form-control" />
                <span asp-validation-for="ConcertDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Location" class="control-label"></label>
                <input asp-for="Location" class="form-control" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TotalTickets" class="control-label"></label>
                <input asp-for="TotalTickets" class="form-control" />
                <span asp-validation-for="TotalTickets" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Жанри</label>
                <select name="GenreIds" class="form-control" multiple asp-items="ViewBag.GenreIds"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Concerts\Delete.cshtml ====
@model ConcertSystemDomain.Model.Concert

@{
    ViewData["Title"] = "Видалити концерт";
}

<h1>Видалити концерт</h1>

<h3>Ви впевнені, що хочете видалити цей концерт?</h3>
<div>
    <h4>Концерт</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Artist)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Artist.FullName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ConcertDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ConcertDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Location)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TotalTickets)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TotalTickets)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.AvailableTickets)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AvailableTickets)
        </dd>
    </dl>

    <form asp-action="DeleteConfirmed" method="post">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Concerts\Details.cshtml ====
@model ConcertSystemDomain.Model.Concert

@{
    ViewData["Title"] = "Деталі концерту";
}

<h1>Деталі концерту</h1>

<div>
    <h4>Концерт</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Артист
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Artist.FullName)
        </dd>
        <dt class="col-sm-2">
            Дата концерту
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ConcertDate)
        </dd>
        <dt class="col-sm-2">
            Місто проведення
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Location)
        </dd>
        <dt class="col-sm-2">
            Загальна кількість квитків
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TotalTickets)
        </dd>
        <dt class="col-sm-2">
            Доступні квитки
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AvailableTickets)
        </dd>
        <dt class="col-sm-2">
            Жанри
        </dt>
        <dd class="col-sm-10">
            @if (Model.Genres.Any())
            {
                @string.Join(", ", Model.Genres.Select(g => g.Name))
            }
            else
            {
                <span>Жанри не вказані</span>
            }
        </dd>
    </dl>
</div>

<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id" class="btn btn-secondary">Редагувати</a> |
    <a asp-action="BuyTicket" asp-route-id="@Model?.Id" class="btn btn-primary">Купити квиток</a> |
    <a asp-action="Index" class="btn btn-info">Повернутися до списку</a>
</div>

// ==== Views\Concerts\Edit.cshtml ====
@model ConcertSystemDomain.Model.Concert

@{
    ViewData["Title"] = "Редагувати концерт";
}

<h1>Редагувати концерт</h1>

<h4>Концерт</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="ArtistId" class="control-label"></label>
                <select asp-for="ArtistId" class="form-control" asp-items="ViewBag.ArtistId"></select>
                <span asp-validation-for="ArtistId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ConcertDate" class="control-label"></label>
                <input asp-for="ConcertDate" class="form-control" />
                <span asp-validation-for="ConcertDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Location" class="control-label"></label>
                <input asp-for="Location" class="form-control" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TotalTickets" class="control-label"></label>
                <input asp-for="TotalTickets" class="form-control" />
                <span asp-validation-for="TotalTickets" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Жанри</label>
                <select name="GenreIds" class="form-control" multiple asp-items="ViewBag.GenreIds">
                    @foreach (var genre in Model.Genres)
                    {
                        <option value="@genre.Id" selected>@genre.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Concerts\Index.cshtml ====

@model IEnumerable<ConcertSystemDomain.Model.Concert>

@{
    ViewData["Title"] = "Події";
}

<h1>Події</h1>

<!-- Повідомлення -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}
@if (User.IsInRole("Admin"))
{
    <p>
        <a asp-action="Create" class="btn btn-primary">Додати нову подію</a>
    </p>
}
<table class="table">
    <thead>
        <tr>
            <th>Артист</th>
            <th>Дата події</th>
            <th>Місто</th>
            <th>Всього квитків</th>
            <th>Доступно квитків</th>
            <th>Дії</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Artist.FullName)</td>
                <td>@Html.DisplayFor(modelItem => item.ConcertDate)</td>
                <td>@Html.DisplayFor(modelItem => item.Location)</td>
                <td>@Html.DisplayFor(modelItem => item.TotalTickets)</td>
                <td>@Html.DisplayFor(modelItem => item.AvailableTickets)</td>
                <td>
                    @if (User.IsInRole("Admin"))
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-secondary">Редагувати</a>
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Видалити</a>
                    }
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">Деталі</a>
                    @if (User.IsInRole("Viewer"))
                    {
                        <a asp-action="BuyTicket" asp-route-id="@item.Id" class="btn btn-sm btn-primary">Купити квиток</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Concerts\MyTickets.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Purchase>

@{
    ViewData["Title"] = "Мої квитки";
}

<h1>Мої квитки</h1>

<!-- Повідомлення -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

@if (Model.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Концерт</th>
                <th>Артист</th>
                <th>Дата</th>
                <th>Місце</th>
                <th>Ряд</th>
                <th>Номер місця</th>
                <th>Ціна</th>
                <th>Дата покупки</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var purchase in Model)
            {
                foreach (var item in purchase.PurchaseItems)
                {
                    <tr>
                        <td>@item.Ticket.Concert.Location</td>
                        <td>@item.Ticket.Concert.Artist.FullName</td>
                        <td>@item.Ticket.Concert.ConcertDate.ToString("dd.MM.yyyy HH:mm")</td>
                        <td>@item.Ticket.Concert.Location</td>
                        <td>@item.Ticket.Row</td>
                        <td>@item.Ticket.SeatNumber</td>
                        <td>@item.Price</td>
                        <td>@purchase.PurchaseDate.ToString("dd.MM.yyyy HH:mm")</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <p>Ви ще не придбали жодного квитка.</p>
}

<div>
    <a asp-action="Index" class="btn btn-secondary">Повернутися до списку концертів</a>
</div>

// ==== Views\Genres\Create.cshtml ====
@model ConcertSystemDomain.Model.Genre

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Genre</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Genres\Delete.cshtml ====
@model ConcertSystemDomain.Model.Genre

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Genre</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>


// ==== Views\Genres\Details.cshtml ====
@model ConcertSystemDomain.Model.Genre

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Genre</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


// ==== Views\Genres\Edit.cshtml ====
@model ConcertSystemDomain.Model.Genre

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Genre</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Genres\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Genre>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Home\Index.cshtml ====

@{
    ViewData["Title"] = "Головна";
}

<h1>Статистика концертів</h1>

<!-- Повідомлення -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<!-- Діаграми -->
<div class="row">
    <div class="col-md-6">
        <div id="concertsByYearChart"></div>
    </div>
    <div class="col-md-6">
        <div id="ticketsByGenreChart"></div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawCharts);

        function drawCharts() {
            // Діаграма 1: Кількість концертів за роками
            fetch('/api/charts/concertsByYear')
                .then(response => response.json())
                .then(data => {
                    const dataTable = new google.visualization.DataTable();
                    dataTable.addColumn('string', 'Рік');
                    dataTable.addColumn('number', 'Кількість концертів');

                    data.forEach(item => {
                        dataTable.addRow([item.year, item.count]);
                    });

                    const options = {
                        title: 'Концерти за роками',
                        width: 500,
                        height: 400,
                        legend: { position: 'none' },
                        backgroundColor: '#FAF9F6',
                        colors: ['#8A2BE2'] 
                    };

                    const chart = new google.visualization.ColumnChart(document.getElementById('concertsByYearChart'));
                    chart.draw(dataTable, options);
                })
                .catch(error => console.error('Помилка завантаження даних для діаграми концертів за роками:', error));

            // Діаграма 2: Кількість проданих квитків за жанрами
            fetch('/api/charts/ticketsByGenre')
                .then(response => response.json())
                .then(data => {
                    const dataTable = new google.visualization.DataTable();
                    dataTable.addColumn('string', 'Жанр');
                    dataTable.addColumn('number', 'Кількість проданих квитків');

                    data.forEach(item => {
                        dataTable.addRow([item.genre, item.count]);
                    });

                    const options = {
                        title: 'Продані квитки за жанрами',
                        width: 500,
                        height: 400,
                        legend: { position: 'none' },
                        backgroundColor: '#FAF9F6',
                        colors: ['#8A2BE2'] 
                    };

                    const chart = new google.visualization.ColumnChart(document.getElementById('ticketsByGenreChart'));
                    chart.draw(dataTable, options);
                })
                .catch(error => console.error('Помилка завантаження даних для діаграми квитків за жанрами:', error));
        }
    </script>
}

// ==== Views\Home\Privacy.cshtml ====
@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>


// ==== Views\PurchaseItems\Create.cshtml ====
@model ConcertSystemDomain.Model.PurchaseItem

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>PurchaseItem</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="PurchaseId" class="control-label"></label>
                <select asp-for="PurchaseId" class ="form-control" asp-items="ViewBag.PurchaseId"></select>
            </div>
            <div class="form-group">
                <label asp-for="TicketId" class="control-label"></label>
                <select asp-for="TicketId" class ="form-control" asp-items="ViewBag.TicketId"></select>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\PurchaseItems\Delete.cshtml ====
@model ConcertSystemDomain.Model.PurchaseItem

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>PurchaseItem</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Quantity)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Quantity)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Price)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Purchase)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Purchase.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Ticket)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Ticket.Status)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>


// ==== Views\PurchaseItems\Details.cshtml ====
@model ConcertSystemDomain.Model.PurchaseItem

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>PurchaseItem</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Quantity)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Quantity)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Price)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Purchase)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Purchase.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Ticket)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Ticket.Status)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


// ==== Views\PurchaseItems\Edit.cshtml ====
@model ConcertSystemDomain.Model.PurchaseItem

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>PurchaseItem</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="PurchaseId" class="control-label"></label>
                <select asp-for="PurchaseId" class="form-control" asp-items="ViewBag.PurchaseId"></select>
                <span asp-validation-for="PurchaseId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TicketId" class="control-label"></label>
                <select asp-for="TicketId" class="form-control" asp-items="ViewBag.TicketId"></select>
                <span asp-validation-for="TicketId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\PurchaseItems\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.PurchaseItem>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Purchase)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Ticket)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Purchase.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Ticket.Status)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Purchases\Create.cshtml ====
@model ConcertSystemDomain.Model.Purchase

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Purchase</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SpectatorId" class="control-label"></label>
                <select asp-for="SpectatorId" class ="form-control" asp-items="ViewBag.SpectatorId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Purchases\Delete.cshtml ====
@model ConcertSystemDomain.Model.Purchase

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Purchase</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PurchaseDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PurchaseDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Spectator)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Spectator.Email)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>


// ==== Views\Purchases\Details.cshtml ====
@model ConcertSystemDomain.Model.Purchase

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Purchase</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PurchaseDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PurchaseDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Spectator)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Spectator.Email)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


// ==== Views\Purchases\Edit.cshtml ====
@model ConcertSystemDomain.Model.Purchase

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Purchase</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SpectatorId" class="control-label"></label>
                <select asp-for="SpectatorId" class="form-control" asp-items="ViewBag.SpectatorId"></select>
                <span asp-validation-for="SpectatorId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PurchaseDate" class="control-label"></label>
                <input asp-for="PurchaseDate" class="form-control" />
                <span asp-validation-for="PurchaseDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <input asp-for="Status" class="form-control" />
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Purchases\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Purchase>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.PurchaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Spectator)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.PurchaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Spectator.Email)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Reports\ExportFilter.cshtml ====
@model dynamic
@{
    ViewData["Title"] = "Експорт з фільтрами";
}

<h1>Експорт даних з фільтрами</h1>

<!-- Повідомлення -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">Експорт в Excel</div>
            <div class="card-body">
                <form asp-action="ExportExcelWithFilter" method="post">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Фільтр за артистом:</label>
                        <select name="artistFilter" class="form-control">
                            <option value="">Без фільтру</option>
                            @foreach (var artist in ViewBag.Artists)
                            {
                                <option value="@artist">@artist</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Фільтр за містом:</label>
                        <select name="locationFilter" class="form-control">
                            <option value="">Без фільтру</option>
                            @foreach (var location in ViewBag.Locations)
                            {
                                <option value="@location">@location</option>
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Експортувати</button>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">Експорт в Word</div>
            <div class="card-body">
                <form asp-action="ExportDocxWithFilter" method="post">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Фільтр за артистом:</label>
                        <select name="artistFilter" class="form-control">
                            <option value="">Без фільтру</option>
                            @foreach (var artist in ViewBag.Artists)
                            {
                                <option value="@artist">@artist</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Фільтр за містом:</label>
                        <select name="locationFilter" class="form-control">
                            <option value="">Без фільтру</option>
                            @foreach (var location in ViewBag.Locations)
                            {
                                <option value="@location">@location</option>
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Експортувати</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="mt-3">
    <a asp-action="Index" class="btn btn-secondary">Повернутися</a>
</div>

// ==== Views\Reports\Index.cshtml ====
@model dynamic
@{
    ViewData["Title"] = "Звіти";
}

<h1>Управління звітами</h1>

<!-- Відображення повідомлень -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
        @if (TempData["ImportErrors"] != null)
        {
            <ul>
                @foreach (var error in Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(TempData["ImportErrors"].ToString()))
                {
                    <li>@error</li>
                }
            </ul>
        }
    </div>
}

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">Імпорт даних</div>
            <div class="card-body">
                <h5>З Excel</h5>
                <form asp-action="ImportExcel" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <input type="file" name="file" class="form-control" accept=".xlsx" />
                    </div>
                    <button type="submit" class="btn btn-primary">Імпортувати</button>
                </form>

                <hr>

                <h5>З Word</h5>
                <form asp-action="ImportDocx" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <input type="file" name="file" class="form-control" accept=".docx" />
                    </div>
                    <button type="submit" class="btn btn-primary">Імпортувати</button>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">Експорт даних</div>
            <div class="card-body">
                <h5>В Excel</h5>
                <form asp-action="ExportExcelWithFilter" method="post">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Фільтр за артистом:</label>
                        <select name="artistFilter" class="form-control">
                            <option value="">Без фільтру</option>
                            @foreach (var artist in ViewBag.Artists)
                            {
                                <option value="@artist">@artist</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Фільтр за містом:</label>
                        <select name="locationFilter" class="form-control">
                            <option value="">Без фільтру</option>
                            @foreach (var location in ViewBag.Locations)
                            {
                                <option value="@location">@location</option>
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Експортувати</button>
                </form>

                <hr>

                <h5>В Word</h5>
                <form asp-action="ExportDocxWithFilter" method="post">
                    <div class="form-group">
                        <label>Виберіть таблицю:</label>
                        <select name="tableName" class="form-control">
                            <option value="Concerts">Концерти</option>
                            <option value="Artist">Виконавці</option>
                            <option value="Purchases">Покупки</option>
                            <option value="Spectators">Глядачі</option>
                            <option value="Tickets">Квитки</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Фільтр за артистом:</label>
                        <select name="artistFilter" class="form-control">
                            <option value="">Без фільтру</option>
                            @foreach (var artist in ViewBag.Artists)
                            {
                                <option value="@artist">@artist</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Фільтр за містом:</label>
                        <select name="locationFilter" class="form-control">
                            <option value="">Без фільтру</option>
                            @foreach (var location in ViewBag.Locations)
                            {
                                <option value="@location">@location</option>
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Експортувати</button>
                </form>
            </div>
        </div>
    </div>
</div>

// ==== Views\Shared\Error.cshtml ====
@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>


// ==== Views\Shared\_Layout.cshtml ====
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ConcertSystem</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Concerts" asp-action="Index">ConcertSystem</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Головна</a>
                        </li>
                        <!-- Випадаюче меню для подій із фільтрами -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle text-dark" href="#" id="concertsDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Події
                            </a>
                            <div class="dropdown-menu" aria-labelledby="concertsDropdown">
                                <form asp-controller="Concerts" asp-action="Index" method="get" class="p-3">
                                    <div class="form-group">
                                        <label>Артист:</label>
                                        <select name="artistFilter" class="form-control">
                                            <option value="">Всі артисти</option>
                                            @foreach (var artist in (List<string>)ViewData["Artists"] ?? new List<string>())
                                            {
                                                <option value="@artist">@artist</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Жанр:</label>
                                        <select name="genreFilter" class="form-control">
                                            <option value="">Всі жанри</option>
                                            @foreach (var genre in (List<string>)ViewData["Genres"] ?? new List<string>())
                                            {
                                                <option value="@genre">@genre</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Місто проведення:</label>
                                        <select name="locationFilter" class="form-control">
                                            <option value="">Всі міста</option>
                                            @foreach (var location in (List<string>)ViewData["Locations"] ?? new List<string>())
                                            {
                                                <option value="@location">@location</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Дата події:</label>
                                        <input type="date" name="dateFilter" class="form-control" />
                                    </div>
                                    <button type="submit" class="btn btn-primary mt-2">Фільтрувати</button>
                                </form>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" asp-controller="Concerts" asp-action="Index">Всі події</a>
                            </div>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Artists" asp-action="Index">Артисти</a>
                        </li>
                        <!-- Додаємо пункт "Мої квитки" для Viewer -->
                        @if (User.IsInRole("Viewer"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Concerts" asp-action="MyTickets">Мої квитки</a>
                            </li>
                        }
                        <!-- Пункти меню тільки для адміністраторів -->
                        @if (User.IsInRole("Admin"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Spectators" asp-action="Index">Глядачі</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Reports" asp-action="Index">Звіти</a>
                            </li>
                        }
                    </ul>
                    <!-- Кнопки автентифікації -->
                    <ul class="navbar-nav">
                        @if (User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <span class="nav-link text-dark">Привіт, @User.Identity.Name!</span>
                            </li>
                            <li class="nav-item">
                                <form asp-controller="Account" asp-action="Logout" method="post">
                                    <button type="submit" class="nav-link btn btn-link text-dark">Вийти</button>
                                </form>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="Login">Увійти</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="Register">Зареєструватися</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <div class="wrapper">
        <div class="container">
            <main role="main" class="pb-3">
                @RenderBody()
            </main>
        </div>
        <div class="push"></div>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            © 2025 - ConcertSystem - <a asp-area="" asp-controller="Home" asp-action="Privacy">Політика конфіденційності</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

// ==== Views\Shared\_Layout.cshtml.css ====
/* Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
for details on configuring this project to bundle and minify static web assets. */

a.navbar-brand {
  white-space: normal;
  text-align: center;
  word-break: break-all;
}

a {
  color: #0077cc;
}

.btn-primary {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.nav-pills .nav-link.active, .nav-pills .show > .nav-link {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.border-top {
  border-top: 1px solid #e5e5e5;
}
.border-bottom {
  border-bottom: 1px solid #e5e5e5;
}

.box-shadow {
  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);
}

button.accept-policy {
  font-size: 1rem;
  line-height: inherit;
}

.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  white-space: nowrap;
  line-height: 60px;
}


// ==== Views\Shared\_ValidationScriptsPartial.cshtml ====
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>


// ==== Views\Spectators\Create.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Додати глядача";
}

<h1>Додати глядача</h1>

<h4>Глядач</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="FullName" class="control-label"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <small id="phone-error" class="form-text text-danger" style="display: none;">Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).</small>
                <span asp-validation-for="Phone" class="text-danger" style="display: none;"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Додати" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Отримуємо елементи
        var phoneInput = document.querySelector('input[name="Phone"]');
        var phoneError = document.getElementById('phone-error');

        // Додаємо обробник події для відображення помилки
        phoneInput.addEventListener('input', function () {
            var phoneValue = this.value;
            if (phoneValue && (phoneValue.length !== 13 || !phoneValue.startsWith('+') || !phoneValue.substring(1).match(/^\d+$/))) {
                phoneError.style.display = 'block';
            } else {
                phoneError.style.display = 'none';
            }
        });

        // Перевіряємо при завантаженні сторінки
        var validationMessage = document.querySelector('span[data-valmsg-for="Phone"][data-valmsg-replace="true"]');
        if (validationMessage && validationMessage.textContent) {
            phoneError.style.display = 'block';
            phoneError.textContent = validationMessage.textContent;
            validationMessage.style.display = 'none';
        }
    </script>
}

// ==== Views\Spectators\Delete.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Видалити глядача";
}

<h1>Видалити глядача</h1>

<h3>Ви впевнені, що хочете видалити цього глядача?</h3>
<div>
    <h4>Глядач</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            ПІБ
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FullName)
        </dd>
        <dt class="col-sm-2">
            Телефон
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Phone)
        </dd>
        <dt class="col-sm-2">
            Електронна пошта
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
    </dl>

    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Видалити" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися до списку</a>
    </form>
</div>

// ==== Views\Spectators\Details.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Деталі глядача";
}

<h1>Деталі глядача</h1>

<div>
    <h4>Глядач</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            ПІБ
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FullName)
        </dd>
        <dt class="col-sm-2">
            Телефон
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Phone)
        </dd>
        <dt class="col-sm-2">
            Електронна пошта
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
    </dl>
</div>

<h4>Куплені квитки</h4>
<hr />
@if (Model.Purchases.Any())
{
    <p>Кількість куплених квитків: @Model.Purchases.Sum(p => p.PurchaseItems.Sum(pi => pi.Quantity))</p>
    <table class="table">
        <thead>
            <tr>
                <th>Концерт</th>
                <th>Артист</th>
                <th>Дата</th>
                <th>Місце</th>
                <th>Ряд</th>
                <th>Номер місця</th>
                <th>Ціна</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var purchase in Model.Purchases)
            {
                foreach (var item in purchase.PurchaseItems)
                {
                    <tr>
                        <td>@item.Ticket.Concert.Location</td>
                        <td>@item.Ticket.Concert.Artist.FullName</td>
                        <td>@item.Ticket.Concert.ConcertDate.ToString("dd.MM.yyyy HH:mm")</td>
                        <td>@item.Ticket.Concert.Location</td>
                        <td>@item.Ticket.Row</td>
                        <td>@item.Ticket.SeatNumber</td>
                        <td>@item.Price</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <p>Цей глядач ще не придбав жодного квитка.</p>
}

<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Редагувати</a> |
    <a asp-action="Index">Повернутися до списку</a>
</div>

// ==== Views\Spectators\Edit.cshtml ====
@model ConcertSystemDomain.Model.Spectator

@{
    ViewData["Title"] = "Редагувати глядача";
}

<h1>Редагувати глядача</h1>

<h4>Глядач</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="FullName" class="control-label"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <small id="phone-error" class="form-text text-danger" style="display: none;">Номер телефону має бути у форматі +380XXXXXXXXX (13 символів, лише цифри після +).</small>
                <span asp-validation-for="Phone" class="text-danger" style="display: none;"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутися до списку</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Отримуємо елементи
        var phoneInput = document.querySelector('input[name="Phone"]');
        var phoneError = document.getElementById('phone-error');

        // Додаємо обробник події для відображення помилки
        phoneInput.addEventListener('input', function () {
            var phoneValue = this.value;
            if (phoneValue && (phoneValue.length !== 13 || !phoneValue.startsWith('+') || !phoneValue.substring(1).match(/^\d+$/))) {
                phoneError.style.display = 'block';
            } else {
                phoneError.style.display = 'none';
            }
        });

        // Перевіряємо при завантаженні сторінки
        var validationMessage = document.querySelector('span[data-valmsg-for="Phone"][data-valmsg-replace="true"]');
        if (validationMessage && validationMessage.textContent) {
            phoneError.style.display = 'block';
            phoneError.textContent = validationMessage.textContent;
            validationMessage.style.display = 'none';
        }
    </script>
}

// ==== Views\Spectators\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Spectator>

@{
    ViewData["Title"] = "Глядачі";
}

<h1>Глядачі</h1>



<table class="table">
    <thead>
        <tr>
            <th>
                ПІБ
            </th>
            <th>
                Телефон
            </th>
            <th>
                Електронна пошта
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FullName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Phone)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Tickets\Create.cshtml ====
@model ConcertSystemDomain.Model.Ticket

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Ticket</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ConcertId" class="control-label"></label>
                <select asp-for="ConcertId" class ="form-control" asp-items="ViewBag.ConcertId"></select>
            </div>
            <div class="form-group">
                <label asp-for="Row" class="control-label"></label>
                <input asp-for="Row" class="form-control" />
                <span asp-validation-for="Row" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SeatNumber" class="control-label"></label>
                <input asp-for="SeatNumber" class="form-control" />
                <span asp-validation-for="SeatNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BasePrice" class="control-label"></label>
                <input asp-for="BasePrice" class="form-control" />
                <span asp-validation-for="BasePrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Tickets\Delete.cshtml ====
@model ConcertSystemDomain.Model.Ticket

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Ticket</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Row)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Row)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SeatNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.SeatNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BasePrice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BasePrice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Concert)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Concert.Location)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>


// ==== Views\Tickets\Details.cshtml ====
@model ConcertSystemDomain.Model.Ticket

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Ticket</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Row)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Row)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SeatNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.SeatNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BasePrice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BasePrice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Concert)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Concert.Location)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


// ==== Views\Tickets\Edit.cshtml ====
@model ConcertSystemDomain.Model.Ticket

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Ticket</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ConcertId" class="control-label"></label>
                <select asp-for="ConcertId" class="form-control" asp-items="ViewBag.ConcertId"></select>
                <span asp-validation-for="ConcertId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Row" class="control-label"></label>
                <input asp-for="Row" class="form-control" />
                <span asp-validation-for="Row" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SeatNumber" class="control-label"></label>
                <input asp-for="SeatNumber" class="form-control" />
                <span asp-validation-for="SeatNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BasePrice" class="control-label"></label>
                <input asp-for="BasePrice" class="form-control" />
                <span asp-validation-for="BasePrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <input asp-for="Status" class="form-control" />
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Tickets\Index.cshtml ====
@model IEnumerable<ConcertSystemDomain.Model.Ticket>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Row)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SeatNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BasePrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Concert)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Row)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SeatNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.BasePrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Concert.Location)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== wwwroot\css\site.css ====
/* ������� ������� */
:root {
    --primary-color: #C3B1E1; /* ���������-���������� */
    --secondary-color: #E6E6FA; /* ���������� */
    --background-color: #FAF9F6; /* ���� ������ ��� */
    --text-color: #4A4A4A; /* �'���� ������ ����� */
    --hover-color: #A89CC8; /* ����� �������� ���������� ���������� ��� ������ */
}

/* �������� ���� */
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
}

body {
    background-color: var(--background-color);
    color: var(--text-color);
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    min-height: 100vh; /* ���������, �� body ����� ��� ������ ���� */
}

.wrapper {
    flex: 1 0 auto; /* ������� ����� ���� ��������� ������ */
}

.push {
    height: 60px; /* ������ ������, ��� ������� �� ������������ */
}

/* ���������� ������ */
.navbar {
    background-color: var(--primary-color) !important;
}

.navbar-brand, .nav-link {
    color: var(--text-color) !important;
}

    .nav-link:hover {
        color: var(--hover-color) !important;
    }

/* ������ */
.btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: var(--text-color);
}

    .btn-primary:hover {
        background-color: var(--hover-color);
        border-color: var(--hover-color);
    }

.btn-secondary {
    background-color: var(--secondary-color);
    border-color: var(--secondary-color);
    color: var(--text-color);
}

    .btn-secondary:hover {
        background-color: var(--hover-color);
        border-color: var(--hover-color);
    }

.btn-info {
    background-color: #C3B1E1; /* ���������-���������� */
    border-color: #C3B1E1;
    color: var(--text-color);
}

    .btn-info:hover {
        background-color: #A89CC8; /* ����� �������� ���������� ���������� */
        border-color: #A89CC8;
    }

.btn-danger {
    background-color: #FFB6C1; /* ���������-������� ��� ��������� */
    border-color: #FFB6C1;
    color: var(--text-color);
}

    .btn-danger:hover {
        background-color: #FFA07A; /* ����� �������� ���������-������� */
        border-color: #FFA07A;
    }

/* ������� */
.table {
    width: 100%;
    margin-bottom: 1rem;
    background-color: white;
    border-collapse: separate;
    border-spacing: 0;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

    .table th,
    .table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    .table th {
        background-color: var(--primary-color);
        color: var(--text-color);
        font-weight: bold;
    }

    .table tbody tr:hover {
        background-color: rgba(195, 177, 225, 0.1); /* ���������-���������� � ��������� */
    }

/* ����� */
.footer {
    flex-shrink: 0; /* ����� �� ���������� */
    background-color: var(--primary-color);
    color: var(--text-color);
    text-align: center;
    padding: 10px 0;
    height: 60px; /* Գ������� ������ ������ */
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
}

/* ���� ��� ����� ���������� */
.filter-panel {
    margin-bottom: 20px;
}

.filter-panel-content {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

/* ���� ��� ������ */
.btn-primary {
    background-color: #B39DDB; /* ���������-���������� */
    border-color: #B39DDB;
    color: white;
}

    .btn-primary:hover {
        background-color: #9575CD; /* ����� �������� ���������� */
        border-color: #9575CD;
    }

.text-danger {
    font-size: 0.9em;
    margin-top: 5px;
}


// ==== wwwroot\js\site.js ====
// Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your JavaScript code.


